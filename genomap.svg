<%[@ IncludeFile "Code/Util.vbs" ]%><%[@ IncludeFile "Code/Lang.vbs" ]%><%[If Session("Book") Then Report.AbortTemplate]%><%[REM Generate SVG and/or PDF images of GenoMapsIf Not Session("Svg") Then Report.AbortPageDim oShell, oFso, oTempSvg, oFile, strTempPdf, strTempSvg, strTempFile, strTempFldr, nError, nPlaceholder, nResponse, fGammaDim oHttp, oBinaryStream, strMapWidth, strMapHeight, nEndHeaderSet oShell = CreateObject("WScript.Shell")Set oFso = CreateObject("Scripting.FileSystemObject")strTempFldr = oFso.GetSpecialFolder(2).Path & "\"strTempFile = oFso.GetTempNameSet oHttp = CreateObject("Microsoft.XMLHTTP")Set oBinaryStream = CreateObject("ADODB.Stream")oBinaryStream.Type = 1		' binaryoBinaryStream.Mode = 3		' read/writeoBinaryStream.OpenfGamma = Left(ReportGenerator.SoftwareVersion, 1) > 2 Or Mid(ReportGenerator.SoftwareVersion, 3,1) > 0ReportGenerator.NegateAxisY = True' store each hyperlink of each hyperlink data source in an ObjectReportory' add its index entry for that ObjectReportory object in a StringDictionary' local variablesDim strPicPath, fZoomExtent, nUIDcount , strThisLocale, strMarkerColors, nChrStart, nChrEnd, strExt, strFile, i, j, nObjectsDim oHyperlinkRings, oHyperlinkRingIndex, oPicIndex, oNameDicNames, oThumbnails, oCnt, g, strSvgDate, strPdfDate, fSkipSet oHyperlinkRings	= Session("oHyperlinkRings")Set oHyperlinkRingIndex = Session("oHyperlinkRingIndex")Set oNameDicNames	= Session("oNameDicNames")Set oPicIndex		= Session("oPicIndex")Set oThumbnails		= CreateObject("Scripting.Dictionary")fCompressSvg		= Report.Parameters("fCompressSvg")="Y"' Create an SVG file for each GenoMap	For Each g In GenoMaps		Set collDrawingObjects = g.DrawingObjects.ToGenoCollection	' Get the collection of drawing objects for the GenoMap		nObjects = collDrawingObjects.Count		If (nObjects > 0) Then ' If the GenoMap has not drawing objects, skip it.			arrBounds = split(g.BoundaryRect, ",")			If UBound(arrBounds) >= 0 Then			     dX = - arrBounds(0)			     dy = - arrBounds(1)			     strMapWidth = MyCStr(arrBounds(2)-arrBounds(0))			     strMapHeight = MyCStr(arrBounds(3)-arrBounds(1))			Else			     Report.LogError Util.FormatPhrase(ConfigMessage("ErrorGenoMapBounds"), g.Name)			     arrBounds = split("0,0,1000,1000", ",")			     dX = 0			     dy = 0			End If					' Generate the filenames to store the .svg and .htm files			' Use the Session object to store those filenames so we can link to the GenoMap later			strFileSvg = Util.FormatString("genomap{}.svg", g.Index)			g.Session("FileSvg") = strFileSvg			strTempSvg = strTempFldr & strTempFile & g.Index & ".svg"			Set oTempSvg = oFso.CreateTextFile(strTempSvg, True, True)			oTempSvg.Close			strPathGenoMap = Util.FormatString("genomaps/genomap{}.htm", g.Index)			g.Session("PathGenoMap") = strPathGenoMap]%><?xml version="1.0" encoding="utf-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"> <%[ nEndHeader = Report.BufferLength ]%><svg id="svgCanvas" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 	font-family="@[Report.Write Util.IfElse(mid(Global.Font,1,1)="@",mid(Global.Font,2),Global.Font)]@"	width="100%"	height="100%"	zoomAndPan="disable"	preserveAspectRatio="xMidYMid meet"  xml:space="preserve" 	style="background-color:white;fill:none;stroke: black;stroke-width:3px;font-weight:normal;font-size:10px;text-anchor:middle;stroke-linecap:round;stroke-linejoin:round;"><!--	<title>@[Report.WriteTextDic "FmtSvgGenoMap", g.Name]@</title> -->        <defs><g id='readme' display='none'><text>PLEASE NOTE: If you do not see a GRAPHIC IMAGE of a family tree here but are seeing this textinstead then it is most probably because the web server is not correctly configured to serve svgpages correctly. see http://developer.mozilla.org/en/docs/SVG:Server_Configuration for information on how tocorrectly configure a web server for svg files.<!-- This comment serves as marker text added post version 2011.06.08 to force SVG/PDF generation once only      to overcome missing picture bug--></text></g>          <marker id="startarrowblack" markerWidth="6" markerHeight="6" viewBox="0 0 3 6" orient="auto" refX="0" refY="3" markerUnits="strokeWidth"> 		<g style="stroke-width:1px;">                    <line x1="3" y1="0" x2="0" y2="3"/>                     <line x1="3" y1="6" x2="0" y2="3"/> 		</g>          </marker>           <marker id="endarrowblack" markerWidth="6" markerHeight="6" viewBox="0 0 3 6" orient="auto" refX="3" refY="3" markerUnits="strokeWidth"> 		<g style="stroke-width:1px;">                    <line x2="3" y2="3" x1="0" y1="0"/>                     <line x2="3" y2="3" x1="0" y1="6"/> 		</g>          </marker>           <marker id="endarrowblue" markerWidth="6" markerHeight="6" viewBox="0 0 3 6" orient="auto" refX="3" refY="3" markerUnits="strokeWidth"> 		<g style="stroke:blue; stroke-width:1px;">                    <line x2="3" y2="3" x1="0" y1="0"/>                     <line x2="3" y2="3" x1="0" y1="6"/> 		</g>          </marker>           <marker id="endarrowred" markerWidth="6" markerHeight="6" viewBox="0 0 3 6" orient="auto" refX="3" refY="3" markerUnits="strokeWidth"> 		<g style="stroke:red; stroke-width:1px;">                    <line x2="3" y2="3" x1="0" y1="0"/>                     <line x2="3" y2="3" x1="0" y1="6"/> 		</g>          </marker>           <marker id="bar" viewBox="0 0 12 22" markerWidth="6" markerHeight="6" orient="auto" refX="6" refY="11" markerUnits="strokeWidth"> 		<g style="stroke:red; stroke-width:3px;">                    <line x1="1" y1="1" x2="1" y2="20"/>                     <line x1="10" y1="0" x2="10" y2="20"/> 		</g>          </marker>           <marker id="barcircle" viewBox="0 0 14 24" markerWidth="7" markerHeight="7" orient="auto" refX="7" refY="12" markerUnits="strokeWidth"> 		<g style="stroke:green; stroke-width:3px;">                    <line x1="1" y1="1" x2="1" y2="20"/>                     <line x1="15" y1="0" x2="15" y2="20"/>                     <circle cx="7.5" cy="10" r="5"/> 		</g>          </marker>           <marker id="circlegreen"  viewBox="1 1 12 12" markerWidth="6" markerHeight="6" orient="auto" refX="6" refY="6" markerUnits="strokeWidth"> 		<g style="stroke:green; stroke-width:2px; fill:white;">                    <circle cx="6" cy="6" r="5"/> 		</g>          </marker>           <marker id="circleblack"  viewBox="1 1 12 12" markerWidth="6" markerHeight="6" orient="auto" refX="6" refY="6" markerUnits="strokeWidth"> 		<g style="stroke:black; stroke-width:2px; fill:white;">                    <circle cx="6" cy="6" r="5"/> 		</g>          </marker>           <marker id="linkgreen"  viewBox="0 0 18 12" markerWidth="9" markerHeight="9" orient="auto" refX="6" refY="6" markerUnits="strokeWidth"> 		<g style="stroke:green; stroke-width:2px; fill:none;">                    <circle cx="6" cy="6" r="5" style="stroke:none;fill:white;"/>                     <circle cx="12" cy="6" r="5" style="stroke:none;fill:white;"/>                     <circle cx="6" cy="6" r="5"/>                     <circle cx="12" cy="6" r="5"/> 		</g>          </marker>           <marker id="linkblack"  viewBox="0 0 18 12" markerWidth="9" markerHeight="9" orient="auto" refX="9" refY="6" markerUnits="strokeWidth"> 		<g style="stroke:black; stroke-width:2px; fill:none;">                    <circle cx="6" cy="6" r="5" style="stroke:none;fill:white;"/>                     <circle cx="12" cy="6" r="5" style="stroke:none;fill:white;"/>                     <circle cx="6" cy="6" r="5"/>                     <circle cx="12" cy="6" r="5"/> 		</g>          </marker>           <marker id="cross"  viewBox="0 0 10 10" markerWidth="6" markerHeight="6" orient="auto" refX="5" refY="5"> 		<g style="stroke:red; stroke-width:2px;">                    <line x1="0" y1="0" x2="10" y2="10"/>                     <line x1="10" y1="0" x2="0" y2="10"/> 		</g>          </marker>           <marker id="crossboxred"  viewBox="0 0 10 10" markerWidth="6" markerHeight="6" orient="auto" refX="5" refY="5" markerUnits="strokeWidth"> 		<g style="stroke:red; stroke-width:2px;">                    <rect x1="0" y1="0" width="10" height="10" style="fill:white;stroke:none;"/>                     <line x1="0" y1="0" x2="10" y2="10"/>                     <line x1="10" y1="0" x2="0" y2="10"/> 		    <polyline points="0,0,10,0,10,10,0,10,0,0"/>		</g>          </marker>           <marker id="crossboxblack"  viewBox="0 0 10 10" markerWidth="6" markerHeight="6" orient="auto" refX="5" refY="5" markerUnits="strokeWidth"> 		<g style="stroke:black; stroke-width:2px;">                    <rect x1="0" y1="0" width="10" height="10" style="fill:white;stroke:none;"/>                     <line x1="0" y1="0" x2="10" y2="10"/>                     <line x1="10" y1="0" x2="0" y2="10"/> 		    <polyline points="0,0,10,0,10,10,0,10,0,0"/>		</g>          </marker>           <marker id="box"  viewBox="0 0 10 10" markerWidth="6" markerHeight="6" orient="auto" refX="5" refY="5" markerUnits="strokeWidth"> 		<g style="stroke:black; stroke-width:2px;">                    <rect x1="0" y1="0" width="10" height="10" style="fill:white;stroke:none;"/>                     <text x="5" y="8" style="fill:black;stroke:none;font-size:8px;">?</text>		    <polyline points="0,0,10,0,10,10,0,10,0,0"/>		</g>          </marker>           <marker id="diamondred"  viewBox="0 0 10 10" markerWidth="6" markerHeight="6" orient="auto" refX="5" refY="5"> 		<g style="stroke:red; stroke-width:2px; fill:white;">                    <path d="M0,5 L5,10 L10,5 L5,0 L0,5"/> 		</g>          </marker>          <marker id="query"  viewBox="0 0 10 10" markerWidth="6" markerHeight="6" refX="5" refY="5" markerUnits="strokeWidth"> 		<g style="stroke:black; stroke-width:2px;">		</g>          </marker> 	  <g id='slash'>		<path d='m5, -5 l-10,10'/>	  </g>	  <g id='backslash'>		<path d='m-5,-5 l10,10'/>	  </g>	  <g id='crossed'>		<path d='m-5,-5 l10,10 m0,-10 l-10,10'/>	  </g>	  <g id='square'>	  <path d='m0,0 l-9,0 l0,-9 l9,0 l0,9 z'/>	  </g>	  <g id='triangle'>	  <path d='m0,0 l-9,0 l9,-9 l0,9 z'/>	  </g>	  <g id='segment'>	  <path d='m0,0 l-9,0 a 9,9 0 0,1 9,-9 l0,9 z'/>	  </g>	  <g id='rect'>	  <path d='m0,0 l-15,0 l0,-15 l15,0 l0,15 z'/>	  </g>	  <g id='houseM'>	  <path d='m-6,6 l0,-8 l6,-4 l6,4 l0,8 l-12,0 z'/>	  </g>	  <g id='houseX'>	  <path d='m-9,9 l0,-12 l9,-6 l9,6 l0,12 l-18,0 z'/>	  </g>	  <g id='houseL'>	  <path d='m-7.5,7.5 l0,-10 l7.5,-5 l7.5,5 l0,10 l-15,0 z'/>	  </g>	  <g id='houseS'>	  <path d='m-5.5,5.5 l0,-7 l6,-3.75 l5.5,3.75 l0,7 l-11,0 z'/>	  </g>	  <g id='houseT'>	  <path d='m-5,5 l0,-6.5 l5,-3.75 l5,3.75 l0,6.5 l-10,0 z'/>	  </g>		<path id="dir_arrow" style="stroke: lightgrey;fill:url(#rad1);stroke-width:1px;" d="m8,0 l-8,-8 l-8 8 h4 v8 h8 v-8 z"/>		<g id="arrowN" viewBox="-40,-40,40,40">			<use xlink:href="#dir_arrow"/>		</g>		<g id="arrowE">			<use xlink:href="#dir_arrow" transform="rotate(90)" viewBox="-40,-40,40,40"/>		</g>		<g id="arrowS">			<use xlink:href="#dir_arrow" transform="rotate(180)" viewBox="-40,-40,40,40"/>		</g>		<g id="arrowW">			<use xlink:href="#dir_arrow" transform="rotate(270)" viewBox="-40,-40,40,40"/>		</g>		<g id="arrowNE">			<use xlink:href="#dir_arrow" transform="rotate(45)" viewBox="-40,-40,40,40"/>		</g>		<g id="arrowSE">			<use xlink:href="#dir_arrow" transform="rotate(135)" viewBox="-40,-40,40,40"/>		</g>		<g id="arrowSW">			<use xlink:href="#dir_arrow" transform="rotate(225)" viewBox="-40,-40,40,40"/>		</g>		<g id="arrowNW">			<use xlink:href="#dir_arrow" transform="rotate(-45)" viewBox="-40,-40,40,40"/>		</g>		<radialGradient id = "rad1" cx = "50%" cy = "50%" r = "50%" fx="30%" fy="30%">			<stop stop-color = "limegreen" offset = "20%"/>			<stop stop-color = "greenyellow" offset = "100%"/>		</radialGradient>	<%[								strMarkerColors = ""					For Each o In collDrawingObjects						Select Case o.Class							Case "Shape", "SocialRelationship"								If o.Display.Arrow.Begin <> "" Or o.Display.Arrow.End <> "" Then									col = o.Display.Color.Line									If col <> "" Then										If Not Instr(strMarkerColors, col) > 0 Then											strMarkerColors = strMarkerColors & col]%>         <marker id="startarrow@[Report.WriteText Mid(col,2)]@" viewBox="0 0 3 6" stroke="@[Report.WriteText col]@" markerWidth="6" markerHeight="6" orient="auto" refX="0" refY="3" markerUnits="strokeWidth" > 		<g style="stroke-width:1px;">                    <line x1="3" y1="0" x2="0" y2="3"/>                     <line x1="3" y1="6" x2="0" y2="3"/> 		</g>          </marker>           <marker id="endarrow@[Report.WriteText Mid(col,2)]@" viewBox="0 0 3 6" stroke="@[Report.WriteText col]@" markerWidth="6" markerHeight="6" orient="auto" refX="3" refY="3" markerUnits="strokeWidth"> 		<g style="stroke-width:1px;">                    <line x2="3" y2="3" x1="0" y1="0"/>                     <line x2="3" y2="3" x1="0" y1="6"/> 		</g>          </marker><%[													End If									End If								End If						End Select					Next					For i = 1 To 8						j = GetScale(i)						Report.WriteFormattedLn "<clipPath id=""clip{6}""><path id=""path{6}"" d=""M{0} {1} L{2} {3} {4} {5} z""/></clipPath>", j, j, 0, -j*1.5, -j, j, i					Next]%>	</defs>	<g id="viewport">	   <rect x="0" y="0" width="@[Report.Write arrBounds(2)-arrBounds(0)]@" height="@[Report.Write arrBounds(3)-arrBounds(1)]@" style="fill:white; opacity:0"/><%[					Set o = Nothing					' Generate the XML/SVG code for each drawing object.					' The collection is already sorted according their z-position.					Dim cchBaseLayer					cchBaseLayer = Report.BufferLength ' pointer for transparent Individual borders					For Each o In collDrawingObjects					Select Case o.Class						Case "EmotionalRelationship"	: DrawEmotionalRelationship o						Case "Family"			            : DrawFamily o						Case "Individual" 		        : DrawIndividual o						Case "Label", "SocialEntity"	: DrawLabelOrSocialEntity o						Case "PedigreeLink"		        : DrawLink o						Case "Secret"		              : DrawSecret o						Case "SpecialSymbol"		      : DrawSymbol o						Case "Shape", "Household"	    : DrawShape o						Case "SocialRelationship"	    : DrawSocialRelationship o						Case "SpecialSymbol"		      : DrawSymbol o						Case "Twin"			              : DrawTwin o					End Select				Next				strTemp = Replace(Report.Buffer,"&nbsp;","&#160;")		' few character entities are pre-defined in SVG				Report.BufferLength = 0				Report.BufferInsertAt 0, strTemp				nPlaceholder = Report.BufferLength				' needed later]%>	<circle id="highlight" cx="0" cy="0" r="50" style="stroke: fuchsia;stroke-width:5px;fill:none;opacity:0.3;" visibility="hidden"/></g>	<svg   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   version="1.1"   width="64.163315"   height="111.75571"   x="10"   y="10"   id="controls">  <defs     id="defs2820">    <filter       x="-0.25"       y="-0.25"       width="1.5"       height="1.5"       color-interpolation-filters="sRGB"       id="filter3696">      <feGaussianBlur         result="blur"         stdDeviation="2.000000"         in="SourceAlpha"         id="feGaussianBlur3698" />      <feColorMatrix         values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0.500000 0 "         type="matrix"         result="bluralpha"         id="feColorMatrix3700" />      <feOffset         result="offsetBlur"         dy="4.000000"         dx="4.000000"         in="bluralpha"         id="feOffset3702" />      <feMerge         result="fbSourceGraphic"         id="feMerge3704">        <feMergeNode           in="offsetBlur"           id="feMergeNode3706" />        <feMergeNode           in="SourceGraphic"           id="feMergeNode3708" />      </feMerge>      <feColorMatrix         id="feColorMatrix4144"         values="0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0"         in="fbSourceGraphic"         result="fbSourceGraphicAlpha" />      <feGaussianBlur         result="blur"         stdDeviation="1.000000"         in="fbSourceGraphicAlpha"         id="feGaussianBlur4146" />      <feColorMatrix         values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0.500000 0 "         type="matrix"         result="bluralpha"         id="feColorMatrix4148" />      <feOffset         result="offsetBlur"         dy="0.100000"         dx="0.100000"         in="bluralpha"         id="feOffset4150" />      <feMerge         result="fbSourceGraphic"         id="feMerge4152">        <feMergeNode           in="offsetBlur"           id="feMergeNode4154" />        <feMergeNode           in="fbSourceGraphic"           id="feMergeNode4156" />      </feMerge>      <feColorMatrix         id="feColorMatrix4186"         values="0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 1 0"         in="fbSourceGraphic"         result="fbSourceGraphicAlpha" />      <feGaussianBlur         result="blur"         stdDeviation="4.000000"         in="fbSourceGraphicAlpha"         id="feGaussianBlur4188" />      <feColorMatrix         values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0.500000 0 "         type="matrix"         result="bluralpha"         id="feColorMatrix4190" />      <feOffset         result="offsetBlur"         dy="0.100000"         dx="2.000000"         in="bluralpha"         id="feOffset4192" />      <feMerge         id="feMerge4194">        <feMergeNode           in="offsetBlur"           id="feMergeNode4196" />        <feMergeNode           in="fbSourceGraphic"           id="feMergeNode4198" />      </feMerge>    </filter>    <filter       color-interpolation-filters="sRGB"       id="filter4226">      <feGaussianBlur         id="feGaussianBlur4228"         stdDeviation="0.27510791" />    </filter>  </defs>  <g style="stroke:#B39B14">  <path     d="m 68.275423,4.9512706 a 51.336864,51.076271 0 1 1 -102.673729,0 51.336864,51.076271 0 1 1 102.673729,0 z"     transform="matrix(0.4959168,0,0,0.49844699,23.681542,29.646234)"     id="path3694"     style="fill:#ffffff;fill-opacity:1;stroke-width:0.99963737;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;filter:url(#filter3696)" />  <path     d="m 18.58418,27.739188 0.01309,-0.0027 -4.169491,3.84375 3.974046,4.039195 -2.084745,1.954449 -5.993644,-6.123941 6.254237,-5.863347 2.006502,2.152605 z"     id="path2836"     style="fill:#B39B14;fill-opacity:1;stroke:none" />  <path     d="m 35.645184,18.817952 0.0027,0.01309 -3.84375,-4.169491 -4.039195,3.974046 -1.954449,-2.084745 6.123941,-5.993645 5.863347,6.254238 -2.152605,2.006502 z"     id="path2836-1"     style="fill:#B39B14;fill-opacity:1;stroke:none" />  <path     d="m 27.778817,44.475469 -0.0027,-0.01309 3.84375,4.169491 4.039195,-3.974046 1.954449,2.084745 -6.123941,5.993644 -5.863347,-6.254237 2.152605,-2.006502 z"     id="path2836-4"     style="fill:#B39B14;fill-opacity:1;stroke:none" />  <path     d="m 44.637113,35.877315 -0.01309,0.0027 4.169491,-3.84375 -3.974046,-4.039195 2.084745,-1.954449 5.993644,6.123941 -6.254237,5.863347 -2.006502,-2.152605 z"     id="path2836-1-4"     style="fill:#B39B14;fill-opacity:1;stroke:none" />  <path     d="m 35.871081,37.288902 1.19637,-1.794555 1.26283,-2.25981 0.79758,-3.655575 -1.1299,-1.595161 -1.3293,0.996976 -0.79758,2.25981 0.0665,-4.519621 -1.92748,0.13293 -0.33233,3.788506 -0.0665,-4.386691 -1.92749,-0.06647 0.0665,3.921436 -1.3293,-1.06344 0.0665,-1.728091 -2.25981,-0.199395 -0.46525,2.126881 2.19334,2.459205 -2.92446,-0.66465 -0.13293,2.193345 1.39577,1.129905 1.1299,1.46223 1.66163,1.46223"     id="path4200"     style="fill:none;stroke-width:0.40000001;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-opacity:0.99415205;stroke-dasharray:none;filter:url(#filter4226)" />  <g     onclick="ZoomIn();"     id="ZoomIn">    <path       d="m 41.540844,75.846165 -0.0897,14.985927 -17.58828,-0.08974"       id="path4245"       style="fill:#ffffff;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />    <path       d="m 23.683364,75.935901 0.0897,13.99883 17.22933,-0.08974 -0.17947,-13.909094"       id="path4232"       style="fill:#ffffff;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />    <path       d="m 185.4845,16.219238 a 9.2428179,4.8457489 0 0 1 -18.48493,0.05967"       transform="matrix(0.9140012,0,0,-0.98675774,-128.87679,91.594199)"       id="path4241"       style="fill:#ffffff;fill-opacity:1;stroke-width:1.23615646;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />    <path       d="m 32.230414,76.991732 0.0238,7.46195"       id="path4249"       style="fill:#ffffff;stroke-width:1.98008847;stroke-opacity:1" />    <path       d="m 28.363214,80.612923 7.74993,0 -7.74993,0 z"       id="path4251"       style="fill:#ffffff;stroke-width:1.84633887px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />  </g>  <g     transform="translate(2.3022537,3.699402)"     onclick="ZoomOut();"     id="ZoomOut">    <path       d="M 39.320482,89.514025 39.180261,102.27412"       id="path4338"       style="fill:#ffffff;;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />    <path       d="m 21.484491,102.34319 0.0897,-13.998827 17.22933,0.08974 -0.17947,13.909097"       id="path4232-2"       style="fill:#ffffff;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />    <path       d="m 185.4845,16.219238 a 9.2428179,4.8457489 0 0 1 -18.48493,0.05967"       transform="matrix(0.9140012,0,0,0.98675774,-130.59886,86.683287)"       id="path4241-4-1"       style="fill:#ffffff;stroke-width:1.23615646;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-opacity:0.87134507;stroke-dasharray:none" />    <path       d="m 185.4845,16.219238 a 9.2428179,4.8457489 0 0 1 -18.48493,0.05967"       transform="matrix(0.9140012,0,0,0.98675774,-131.05531,86.167363)"       id="path4241-4"       style="fill:#ffffff;fill-opacity:1;stroke-width:1.23615646;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />    <path       d="m 25.802333,97.053049 7.74993,0 -7.74993,0 z"       id="path4251-5"       style="fill:#ffffff;stroke-width:1.84633887px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />  </g>  <rect     width="14.906313"     height="14.211117"     x="8.5363598"     y="25.281897"     id="PanLeft"     onclick="panmap(evt,getInnerWidth()/5,0)"     style="fill:#dbdce9;opacity:0" />  <rect     width="14.906313"     height="14.211117"     x="24.525877"     y="9.6399784"     id="PanUp"     onclick="panmap(evt,0,getInnerHeight()/5)"     style="fill:#dbdce9;opacity:0" />  <rect     width="14.906313"     height="14.211117"     x="40.051929"     y="24.934298"     id="PanRight"     onclick="panmap(evt,-getInnerWidth()/5,0)"     style="fill:#dbdce9;opacity:0" />  <rect     width="14.906313"     height="14.211117"     x="23.830681"     y="41.155548"     id="PanDown"     onclick="panmap(evt,0,-getInnerHeight()/5);"     style="fill:#dbdce9;opacity:0" /></g></svg>	<g id="GenoPro" x="60" y="20" opacity='0.8' style="font-size:9px; stroke:none; text-anchor:middle; fill:darkblue" background-color="white">		<a xlink:href='http://www.genopro.com/reportgenerator/' target='_blank'>			<text cursor="pointer">				<tspan>Generated by GenoPro®. Click here for details.</tspan>			</text>	  </a>  </g></svg><%[				' Report.BufferWriteToFile "genomaps/" & strFileSvg		' Write the now updated content of the buffer to the file again				Report.BufferRemoveAt 0, nEndHeader ' remove xml header				Set oTempSvg = oFso.OpenTextFile(strTempSvg, 2, True, -1)				oTempSvg.Write Report.Buffer 				oTempSvg.Close				g.Session("svg") = strTempSvg ' record filename for use in genomap.htm template				Report.BufferLength = 0			' Flush the buffer for the next SVG document		End If ' (collDrawingObjects.Count > 0)	NextFor Each strFile In oThumbnails.Items	If strFile <> "" Then		strFile = strTempFldr & Mid(strFile, 1, InStr(strFile,"|")-1)		If oFso.FileExists(strFile) Then oFso.DeleteFile(strFile)	End IfNextReport.AbortPage	' Prevent the template file "genomap.svg" from being written to the output report'' Helper methods'Function GetSize(strSize)    If strSize = "" Then      GetSize = 3    Else      Select Case strSize      		Case "T"     : GetSize = 1      		Case "S"     : GetSize = 2      		Case "M"     : GetSize = 3      		Case "L"     : GetSize = 4      		Case "X"     : GetSize = 5      		Case "XX"    : GetSize = 6      		Case "XXX"   : GetSize = 7      		Case "XXXX" : GetSize = 8      		Case Else    : GetSize = 3: Report.LogComment "Unknown Size " & strSize      End Select    End IfEnd FunctionFunction GetFontSize(nSize)    Dim arrValues    arrValues = Array(6,7.5,10,16,22,32,48,96)    GetFontSize = arrValues(nSize-1)End FunctionFunction GetLine(nSize)    Dim arrValues    arrValues = Array(8,11,14,21,28,48,96,144)    GetLine = arrValues(nSize-1)End FunctionFunction GetOffset(nSize)    Dim arrValues    arrValues = Array(1,3,4,4,5,7,12,20)    GetOffset = arrValues(nSize-1)End FunctionFunction GetStep(nSize)    Dim arrValues    arrValues = Array(8,10,12,18,24,36,50,104)    GetStep = arrValues(nSize-1)End FunctionFunction GetFactor(nSize)    Dim arrValues    arrValues = Array(10,15,18,28,32,50,72,144)    GetFactor = arrValues(nSize-1) / 18End FunctionFunction GetScale(nSize)    Dim arrValues    arrValues = Array(4,6,9,12,16,24,36,72)    GetScale = arrValues(nSize-1)End FunctionFunction GetOrientation(nSize)    Dim arrValues    arrValues = Array(2,3,4,5,8,14,24,60)    GetOrientation = arrValues(nSize-1)End FunctionFunction GetTrans(nSize)    Dim arrValues    arrValues = Array(6,10,14,20,26,36,50,88)    GetTrans = arrValues(nSize-1)End FunctionSub DrawID (o)  ' draw hidden object ID for PDF text search for positioning	Dim nSize, nFontSize, nStep, nLine, y, pos, xyTopRight, xyTopLeft, xTopCenter	nSize = GetSize(o.Position.Size.ID)	nFontSize = GetFontSize(nSize)	nLine = GetLine(nSize)	nStep = GetStep(nSize)	Select Case o.Class		Case "Individual" :			y = o.Position.y + nStep - nFontSize/5 + nLine			Report.WriteFormattedLn "<text x=""{}"" y=""{}"" style=""font-size: {}px; stroke: none; fill: white; text-anchor: middle;"">{&x}</text>", MyCStr(o.Position.x + dX + nFontSize/5), MyCStr(y + dY), MyCStr(nFontSize), o.ID		Case "Family"	  :			set pos = o.Position			xyTopRight=split(pos.Top.Right,",")			xyTopLeft=split(pos.Top.Left,",")			xyStartLeft=split(pos.Bottom.Left,",")			xTopCenter=xyTopLeft(0)+ ( xyTopRight(0) - xyTopLeft(0) ) / 2 + dX			Report.WriteFormattedLn "<text x=""{}"" y=""{}"" style=""font-size: {}px; stroke: none; fill: white; text-anchor: middle;"">{&x}</text>", MyCStr(xTopCenter), MyCStr(xyTopLeft(1) + dY + nLine / 2), MyCStr(nFontSize), o.ID	End SelectEnd SubSub DrawIndividual (i)	Dim col, nam, pos, index, strBorderFill, strBorderOutline, strGender, strGenderFill, strGendertext, strGenderSymbol, strWidth, nThickness, nFontSize	Dim nSize, nScale, nHalf, nQtr, nStep, strFilter, strOutline, strFill, strCol, line, strTrans, y, nLen, nOffset, nTrans, strLink	Dim	cchBufferStart, flg, flgSource	Set col = i.Display.Colors	Set pos = i.Position	Set nam = i.Name	Set flg = i.Display.Flags	' if hyperlink get other end and if link end then get object for source-end of link	If CustomTag(i, "HideLabel") = "Y" Then Exit Sub	If i.IndividualInternalHyperlink.ID <> "" Then		set oHyperlinkRing=oHyperlinkRings.Entry(i.IndividualInternalHyperlink.ID)		' get the data_source of this hyperlink		set isource=oHyperlinkRing.Object(oHyperlinkRingIndex.KeyValue(i.IndividualInternalHyperlink.ID))		' get the next hyperlink in the ring		set ilink=oHyperlinkRing.Object((oHyperlinkRingIndex.KeyValue(i.ID) + 1 ) mod oHyperlinkRing.Count)	Else		set isource=i		if i.Hyperlink.Internal = "Y" Then			' get the next hyperlink in the ring			set oHyperlinkRing=oHyperlinkRings.Entry(i.ID)			set ilink=oHyperlinkRing.Object((oHyperlinkRingIndex.KeyValue(i.ID) + 1 ) mod oHyperlinkRing.Count)		else			set ilink = nothing		end If	End If	Set flgSource = isource.Display.Flags  nSize = GetSize(pos.Size.ID)	nScale = GetScale(nSize) * 2	nHalf = nScale / 2	nFontSize=GetFontSize(nSize)	nStep = GetStep(nSize)	nThickness = nSize  strWidth = "stroke-width:" & nSize & "px;"	If i.Href <> "" Then Report.WriteFormattedLn "<a xlink:href='../{}' onclick='restorePopUpFrame();' target='detail'>", i.Href	If Instr(flg.Enable,"b")>0 Then		' border required    strFill=col.Border.Fill		strOutline = col.Border.Outline		cchBufferStart = Report.BufferLength		DrawRectangle pos.BoundaryRect, strFill, strOutline, strWidth		If Instr(flg.Enable,"d") > 0 And fGamma Then ' not opaque, i.e. transparent background, so move to bottom level i.e. start of file      strTemp = Report.Buffer(cchBufferStart) ' get the rectangle and border just drawn'      Report.BufferLength = cchBufferStart ' remove from buffer      Report.BufferInsertAt cchBaseLayer, strTemp ' put it at start of drawing      cchBaseLayer = cchBaseLayer + Len(strTemp) ' increment pointer    End If	Else		strFill="white"		'because col.Border.Fill is set to #FFFF80 (yellow) even when no border required, not white	End If	If col.Label.Fill.Top <> "" Then strFill = col.Label.Fill.Top	If col.Label.Top <> "" Then		strCol = col.Label.Top	Else		strCol = "black"	End If	With i.Display.Label.Top		If Instr(flg.Disable,"L") = 0 And Ubound(.Text) >= 0 Then			nRowHeight= Util.GetHeight(.Dimension)/(Ubound(.Text) + 1)			If Instr(flg.Enable,"t")=0 And Instr(flg.Enable,"O")=0 Then       Report.WriteFormattedLn "<rect x=""{}"" y=""{}"" height=""{}px"" width=""{}px"" style=""stroke:none;fill:{};""/>", MyCStr(pos.x + dX - Util.GetWidth(.Dimension)/2), MyCStr(pos.y + dY - nstep - Util.GetHeight(.Dimension)), Util.GetHeight(.Dimension), Util.GetWidth(.Dimension), strFill      End If			Report.WriteFormattedLn "<text style=""font-size:{}px;text-anchor:middle;"" x=""{}"" y=""{}"">", MyCStr(nFontSize), pos.x + dX, MyCStr(pos.y  + dY - nStep - Util.GetHeight(.Dimension) - nFontSize/4)			For Each line in .Text        If Instr(flg.Enable,"O")>0 Then            Report.WriteFormattedLn "<tspan x=""{}"" dy=""{}"" style=""stroke:{};stroke-width:3px;fill:none;"">{&x}</tspan>", MyCStr(pos.x + dX + nFontSize/5), MyCStr(nRowHeight), strFill, line        End If				Report.WriteFormattedLn "<tspan x=""{}"" dy=""{}"" style=""stroke:none;fill:{};"">{&x}</tspan>", MyCStr(pos.x + dX + nFontSize/5), Util.IfElse(Instr(flg.Enable,"O")>0, 0, nRowHeight), strCol, line			Next			Report.WriteLn "</text>"		End If	End With	If i.Hyperlink.Internal = "Y" Then		strTextStyle="fill:blue;"		If i.Href <> "" Then Report.WriteLn "</a>"		strAction=Util.FormatString("<a xlink:href='../genomaps/genomap{}.htm?x={},y={},highlight=true' target='popup'>", ilink.Position.GenoMap.index, ilink.Position.x, ilink.Position.y)	ElseIf  mid(Lcase(i.Hyperlink.Target),1,5) = "http:" or  mid(Lcase(i.Hyperlink.Target),1,5) = "file:" or  mid(Lcase(i.Hyperlink.Target),1,7) = "mailto:" Then		strTextStyle="fill:darkviolet;"		If i.Href <> "" Then Report.WriteLn "</a>"		strAction=Util.FormatString("<a xlink:href='{&j}' target='_blank'>", i.Hyperlink.Target)	ElseIf  i.Hyperlink.Action.ID = "External" Then		strLink = i.Hyperlink.Target		If Not Instr(strLink, ":") > 0 Then strLink = ReportGenerator.Document.BasePath & strLink ' relative link		If oFso.FileExists(strLink) Then 			strLink = "media/" & Session("UUID") & "_" & Util.HrefEncode(oFso.GetFile(strLink).Name)			ReportGenerator.FileUpload i.Hyperlink.Target, Util.UrlDecode(strLink)			Session("UUID") = Session("UUID") + 1			strTextStyle="fill:darkviolet;"			If i.Href <> "" Then Report.WriteLn "</a>"			strAction=Util.FormatString("<a xlink:href='{&j}' target='_blank'>", "../" & strLink)		End If	Else		strTextStyle="fill: black;"		strAction=""	End If	If Instr(flg.Enable,"b")>0 Then		' border required		strFill=col.Border.Fill	Else		strFill="white"		'because col.Border.Fill is set to #FFFF80 (yellow) even when no border required, not white	End If	If col.Label.Fill.Bottom <> "" Then strFill = col.Label.Fill.Bottom	If col.Label.Bottom <> "#000000" Then		strTextStyle = "fill: " & col.Label.Bottom & ";"	End If	If strAction <> "" Then	Report.WriteLn strAction	With i.Display.Label.Bottom		If Instr(flg.Disable,"l") = 0 And Ubound(.Text) >= 0 Then			nRowHeight= Util.GetHeight(.Dimension)/(Ubound(.Text) + 1)			strTextStyle = strTextStyle & "text-anchor:middle;"			If Instr(flg.Enable,"t")=0 And Instr(flg.Enable,"O")=0 Then Report.WriteFormattedLn "<rect x=""{}"" y=""{}"" height=""{}px"" width=""{}px"" style=""stroke:none;fill:{};""/>", MyCStr(pos.x + dX - Util.GetWidth(.Dimension)/2), MyCStr(pos.y + dY + nstep), Util.GetHeight(.Dimension), Util.GetWidth(.Dimension), strFill			y = pos.y + nStep - nFontSize/5			Report.WriteFormattedLn "<text style=""font-size:{}px;"" x=""{}"" y=""{}"">", MyCStr(nFontSize), pos.x + dX, MyCStr(y + dY)			If strAction <> "" And nObject < 500 Then				Report.WriteLn "<set attributeName=""fill"" attributeType=""CSS"" to=""maroon"" begin=""mouseover"" end=""mouseout""/>"			End If			For Each line in .Text				strTrans = StrNameTranslate(line, oNameDicNames, False)				y = y + nRowHeight				If Instr(flg.Enable,"O")>0 Then Report.WriteFormattedLn "<tspan x=""{}"" y=""{}"" style=""stroke:{};stroke-width:3px;fill:none;text-anchor:middle;"">{&x}</tspan>", MyCStr(pos.x + dX + nFontSize/6), MyCStr(y + dY), strFill, line				Report.WriteFormattedLn "<tspan x=""{}"" y=""{}"" style=""stroke:none;{}"">{&x}</tspan>", MyCStr(pos.x + dX + nFontSize/6), MyCStr(y + dY), strTextStyle, line			Next			Report.WriteLn "</text>"		End If	End With	If strAction <> "" Then		Report.WriteLn "</a>"		If isource.Href <> "" Then Report.WriteFormattedLn "<a xlink:href='../{&x}' onclick='restorePopUp();' target='detail'>", isource.Href	End If	If Instr(flg.Disable,"g") = 0 Then		' Display gender symbol        Report.WriteLn "<g>"        strGender = isource.Gender.ID		strGenderSymbol = Util.FirstNonEmpty(col.Gender.Symbol, "#000000")		strGenderFill = Util.FirstNonEmpty(col.Gender.Fill, "white")		strGenderText = Util.FirstNonEmpty(col.Gender.Text, "black")		Set gf = col.Gender.Fill		If gf.mask <> "" and i.IsDead And Instr(flg.Disable,"x") = 0 Then			If Session("DisplayAnthropologicalKinshipDiagram") Then				Report.WriteFormattedLn "<path d=""M{0} {1} l{2} {3}"" style=""stroke: {4};stroke-width:1px;""/>",_					MyCStr(pos.x + dX - nScale), MyCStr(pos.y + dY + nScale), MyCStr(2 * nScale), MyCStr(- 2 * nScale), strGenderSymbol			Else				Report.WriteFormattedLn "<path d=""M{0} {1} l{2} {3} m{4} {5} l{6} {7}"" style=""stroke: {8};stroke-width:1px;""/>",_					MyCStr(pos.x + dX - nScale), MyCStr(pos.y + dY - nScale), MyCStr(2 * nScale), MyCStr(2 * nScale), MyCStr(- 2 * nScale), 0, MyCStr(2 * nScale), MyCStr(- 2 * nScale), strGenderSymbol			End If		End If		If Instr(flg.Enable, "p") > 0 Then strGender = "p"		If fGamma Then		   If i.TransGender.ID = "WomanToMan" Then              nTrans = GetTrans(nSize)        			Report.WriteFormattedLn "<circle cx=""{0}"" cy=""{1}"" r=""{2}"" style=""cursor:pointer;stroke: {4};fill:{5};{3}""/>",_        						MyCStr(pos.x + dX), MyCStr(pos.y + dY), MyCStr(nTrans), strWidth, "white", strGenderFill        			Report.WriteFormattedLn "<circle cx=""{0}"" cy=""{1}"" r=""{2}"" style=""cursor:pointer;stroke: {4};fill:{5};{3}""/>",_        						MyCStr(pos.x + dX), MyCStr(pos.y + dY), MyCStr(nTrans), strWidth, strGenderSymbol, "none"		   ElseIf i.TransGender.ID = "ManToWoman" Then		          nTrans = GetTrans(nSize)        			Report.WriteFormattedLn "<rect x=""{0}"" y=""{1}"" width=""{2}px"" height=""{2}px"" style=""cursor:pointer;stroke: {4};fill:{5};{3}""/>",_        					 MyCStr(pos.x + dX - nTrans), MyCStr(pos.y + dY - nTrans), MyCStr(nTrans * 2), strWidth, "white", strGenderFill        			Report.WriteFormattedLn "<rect x=""{0}"" y=""{1}"" width=""{2}px"" height=""{2}px"" style=""cursor:pointer;stroke: {4};fill:{5};{3}""/>",_        					 MyCStr(pos.x + dX - nTrans), MyCStr(pos.y + dY - nTrans), MyCStr(nTrans * 2), strWidth, strGenderSymbol, "none"		   End If		End If		nOffset = 0		Select Case strGender		Case "M"			If Session("DisplayAnthropologicalKinshipDiagram") Then				nOffset = nHalf / 2				Report.WriteFormattedLn "<path d=""M{0} {1} L{2} {3} {4} {5} z"" style=""cursor:pointer;stroke: {6};fill:{7};{8}""/>",_											MyCStr(pos.x + dX + nHalf), MyCStr(pos.y + dY + nHalf),_											MyCStr(pos.x + dX), MyCStr(pos.y + dY - nHalf*1.5),_											MyCStr(pos.x + dX - nHalf), MyCStr(pos.y + dY + nHalf),_											"white", strGenderFill, strWidth				If gf.mask <> "" Then DrawQuadrants gf, pos.x + dX, pos.y + dY, MyCStr(nScale), "rect", nSize, nOffset				Report.WriteFormattedLn "<path d=""M{0} {1} L{2} {3} {4} {5} z"" style=""cursor:pointer;stroke: {6};fill:{7};{8}"">",_											MyCStr(pos.x + dX + nHalf), MyCStr(pos.y + dY + nHalf),_											MyCStr(pos.x + dX), MyCStr(pos.y + dY - nHalf*1.5),_											MyCStr(pos.x + dX - nHalf), MyCStr(pos.y + dY + nHalf),_											strGenderSymbol, "none", strWidth				If nObject < 500 Then Report.WriteLn "<set attributeName=""fill"" attributeType=""CSS"" to=""lime"" begin=""mouseover"" end=""mouseout""/>"				Report.WriteLn "</path>"			Else				Report.WriteFormattedLn "<rect x=""{0}"" y=""{1}"" width=""{2}px"" height=""{2}px"" style=""cursor:pointer;stroke: {4};fill:{5};{3}""/>",_						 MyCStr(pos.x + dX - nHalf), MyCStr(pos.y + dY - nHalf), MyCStr(nScale), strWidth, "white", strGenderFill				If gf.mask <> "" Then DrawQuadrants gf, pos.x + dX,pos.y + dY, nScale,"square", nSize, nOffset				Report.WriteFormattedLn "<rect x=""{0}"" y=""{1}"" width=""{2}px"" height=""{2}px"" style=""cursor:pointer;stroke: {4};fill:{5};{3}"">",_						 MyCStr(pos.x + dX - nHalf), MyCStr(pos.y + dY - nHalf), nScale, strWidth, strGenderSymbol, "none"				If nObject < 500 Then Report.WriteLn "<set attributeName=""fill"" attributeType=""CSS"" to=""cyan"" begin=""mouseover"" end=""mouseout""/>"				Report.WriteLn "</rect>"			End If		Case "F"			Report.WriteFormattedLn "<circle cx=""{0}"" cy=""{1}"" r=""{2}"" style=""cursor:pointer;stroke: {4};fill:{5};{3}""/>",_						pos.x + dX, pos.y + dY, nHalf, strWidth, "white", strGenderFill			If gf.mask <> "" Then DrawQuadrants gf, pos.x + dX, pos.y + dY, MyCStr(nScale), "segment", nSize, nOffset			Report.WriteFormattedLn "<circle cx=""{0}"" cy=""{1}"" r=""{2}"" style=""cursor:pointer;stroke: {4};fill:{5};{3}"">",_						pos.x + dX, pos.y + dY, nHalf, strWidth, strGenderSymbol, "none"			If nObject < 500 Then Report.WriteLn "<set attributeName=""fill"" attributeType=""CSS"" to=""pink"" begin=""mouseover"" end=""mouseout""/>"			Report.WriteLn "</circle>"		Case "P"			Report.WriteFormattedLn "<path d=""M{0} {1} L{2} {3} {4} {1} {2} {5} z"" style=""cursor:pointer;stroke: {6};fill:{7};{8}""/>",_						MyCStr(pos.x + dX - nHalf), pos.y + dY, pos.x + dX, MyCStr(pos.y + dY + nHalf), MyCStr(pos.x + dX + nHalf), MyCStr(pos.y + dY - nHalf), "white", strGenderFill, strWidth			If gf.mask <> "" Then DrawQuadrants gf, pos.x + dX, pos.y + dY, MyCStr(nScale), "triangle", nSize, nOffset			Report.WriteFormattedLn "<path d=""M{0} {1} L{2} {3} {4} {1} {2} {5} z"" style=""cursor:pointer;stroke: {6};fill:{7};{8}"">",_						MyCStr(pos.x + dX - nHalf), pos.y + dY, pos.x + dX, MyCStr(pos.y + dY + nHalf), MyCStr(pos.x + dX + nHalf), MyCStr(pos.y + dY - nHalf), strGenderSymbol, "none", strWidth			If nObject < 500 Then Report.WriteLn "<set attributeName=""fill"" attributeType=""CSS"" to=""lime"" begin=""mouseover"" end=""mouseout""/>"			Report.WriteLn "</path>"		Case "p" ' draw pregnancy symbol			Report.WriteFormattedLn "<path d=""M{0} {1} L{2} {3} {4} {1} z"" style=""cursor:pointer;stroke: {5};fill:{6};{7}""/>",_						MyCStr(pos.x + dX - nHalf), MyCStr(pos.y + dY + nHalf), pos.x + dX, MyCStr(pos.y + dY - nHalf), MyCStr(pos.x + dX + nHalf), "white", strGenderFill, strWidth			If gf.mask <> "" Then DrawQuadrants gf, pos.x + dX, pos.y + dY, MyCStr(nScale), "triangle", nSize, nOffset			Report.WriteFormattedLn "<path d=""M{0} {1} L{2} {3} {4} {1} z"" style=""cursor:pointer;stroke: {5};fill:{6};{7}"">",_						MyCStr(pos.x + dX - nHalf), MyCStr(pos.y + dY + nHalf), pos.x + dX, MyCStr(pos.y + dY - nHalf), MyCStr(pos.x + dX + nHalf), strGenderSymbol, "none", strWidth			If nObject < 500 Then Report.WriteLn "<set attributeName=""fill"" attributeType=""CSS"" to=""lime"" begin=""mouseover"" end=""mouseout""/>"			Report.WriteLn "</path>"		Case Else			Report.WriteFormattedLn "<rect x=""{0}"" y=""{1}"" width=""{2}px"" height=""{2}px"" style=""cursor:pointer;stroke: {4};fill:{5};{3}""/>",_					 MyCStr(pos.x + dX - nHalf), MyCStr(pos.y + dY - nHalf), MyCStr(nScale), strWidth, "none", "white"			If gf.mask <> "" Then DrawQuadrants gf, pos.x + dX, pos.y + dY, MyCStr(nScale),"square", nSize, nOffset			Report.WriteFormattedLn "<text x=""{0}"" y=""{1}"" style=""cursor:pointer;stroke:none;fill:{2};{3}"">?</text>",_					 pos.x + dX, MyCStr(pos.y + dY + nHalf/2), strGenderSymbol, MyCStr(nFontSize)		End Select				If fGamma Then		   Select Case i.SexualOrientation		          Case "", "Heterosexual"		          Case Else		               nLen = GetOrientation(nSize)		               Report.WriteFormattedLn "<path d=""M{0} {1} L{2} {3} {4} {5} {0} {1} z"" style=""stroke:{6};fill:none;{7}""/>",_		                      MyCStr(pos.x + dX - nLen), MyCStr(pos.y + dY - nLen), MyCStr(pos.x + dX + nLen), MyCStr(pos.y + dY - nLen), MyCStr(pos.x + dX), MyCStr(pos.y + dY + nLen), strGenderSymbol & ";opacity:0.5", strWidth                            End Select		End If				If Instr(flgSource.Enable, "V") > 0 Then		  Report.WriteFormattedLn "<path d=""M{} {} l0 {}"" style=""fill:none;stroke:{};stroke-width:{}px;""/>", MyCStr(pos.X +dX), MyCStr(pos.y + dY + nHalf), MyCStr(-(nScale + nOffset)), strGenderSymbol, CInt((nSize + .5) / 2 )		End If				If Instr(flgSource.Enable, "H") > 0 Then		  Report.WriteFormattedLn "<path d=""M{} {} l{} 0"" style=""fill:none;stroke:{};stroke-width:{}px;""/>", MyCStr(pos.X +dX + nHalf), MyCStr(pos.y + dY + nOffset), MyCStr(nScale), strGenderSymbol, CInt((nSize + .5) / 2 )		End If		If gf.mask="" And i.IsDead And Instr(flg.Disable,"x") = 0 Then			If (i.Age = "" Or Instr(flg.Disable,"a") > 0) Then				Report.WriteFormattedLn "<path d=""M{0} {1} L{2} {3} m{4} {5} L{6} {7}"" style=""stroke: {8};stroke-width:1px;""/>",_					MyCStr(pos.x + dX - nHalf), MyCStr(pos.y + dY - nHalf), MyCStr(pos.x + dX + nHalf), MyCStr(pos.y + dY + nHalf), MyCStr(- nScale), 0, MyCStr(pos.x + dX + nHalf), MyCStr(pos.y + dY - nHalf), strGenderSymbol			Else			  nQtr = nHalf / 2				Report.WriteFormattedLn "<path d=""M{0} {1} l{2} {3} m{4} {5} l{6} {7} m{8} {9} l{10} {11} m{12} {13} l{14} {15}"" style=""stroke: {16};stroke-width:1px;""/>",_					MyCStr(pos.x + dX - nHalf), MyCStr(pos.y + dY - nHalf), MyCStr(nQtr), MyCStr(nQtr), nHalf, nHalf, _         MyCStr(nQtr), MyCStr(nQtr), -nScale, 0, MyCStr(nQtr), MyCStr(-nQtr), nHalf, -nHalf, MyCStr(nQtr), MyCStr(-nQtr), strGenderSymbol			End If		End If		If (i.IsDead And Instr(flg.Disable,"a") = 0) Or Session("ShowAllAges") Then			Report.WriteFormattedLn "<text style=""stroke:{};stroke-width:1px;fill:none;font-size:{}px;text-anchor:middle;"" x=""{}"" y=""{}"">{}</text>", strGenderFill, MyCStr(nFontSize/2), MyCStr(pos.x + dX), MyCStr(pos.y + dY+nStep/4 + (nOffset*0.7)), Util.FormatPhrase(StrDicExt("FmtGenoMapAge", "", "{0}[{?!0}{1}m][{?!0|1}{2}d]", "", "2.0.1.7"), i.Age.Years, i.Age.Months, i.Age.Days)			Report.WriteFormattedLn "<text style=""stroke:none;stroke-width:1px;fill:{};font-size:{}px;text-anchor:middle;"" x=""{}"" y=""{}"">{}</text>", strGenderText, MyCStr(nFontSize/2), MyCStr(pos.x + dX), MyCStr(pos.y + dY+nStep/4 + (nOffset*0.7)), Util.FormatPhrase(StrDicExt("FmtGenoMapAge", "", "{0}[{?!0}{1}m][{?!0|1}{2}d]", "", "2.0.1.7"), i.Age.Years, i.Age.Months, i.Age.Days)		End If        If i.Comment <> "" Then Report.WriteFormattedLn "<title>{}</title>", StrFormatText(i, i.Comment)        Report.WriteLn "</g>"	End If	If i.Href <> "" Then Report.WriteLn "</a>"End SubSub DrawFamily(f)	Dim strRelation, strRelationships, strColor, strDash, strWidth, nScale, nHalf, nFontSize, xTopCenter, xyTopRight, xyTopLeft, xyStartRight, xyStartLeft, strDataTip	If CustomTag(f, "HideLabel") = "Y" Then Exit Sub	' set colour and pattern of lines according to type of relationship	strRelation = f.Relation.ID	Select Case strRelation	Case "Marriage", "Widowed"					: strColor="black" : strDash=""	Case "Divorce", "Separation", "SeparationLegal", "Nullity"	: strColor="maroon": strDash=""	Case "Engagement"						: strColor="blue"  : strDash="stroke-dasharray:10,5;"	Case "TemporaryRelation"					: strColor="blue"  : strDash="stroke-dasharray:2,10,6,10;"	Case "Rape"							: strColor="red"  : strDash="stroke-dasharray:2,10;"	Case "Other"							: strColor="gray"  : strDash="stroke-dasharray:3,3,3,6;"	Case ""			strColor="gray"  : strDash=""		If f.GotMarried Then			nUnions = f.Unions.Count			If f.AreTogether Then				strColor="black" : strDash=""			Else				If nUnions > 0 Then					Set d = f.Unions(nUnions-1).Divorce					If f.Unions(nUnions-1).IsAnnulled Then						strRelation = "Nullity"						strColor="maroon"					ElseIf  d.Date & d.Place & d.Source & d.RequestedBy & _						    d.Attorney.Husband & d.Attorney.Wife & d.Officiator <> "" Then						strRelation = "Divorce"						strColor="maroon"					End If				End If			End If		End If	Case Else		strColor="blue"		If     Instr(strRelation,"Casual") = 1 Then									strDash="stroke-dasharray:4,3;"		ElseIf Instr(strRelation,"Engagement") = 1 Then									strDash="stroke-dasharray:11,3;"		ElseIf Instr(strRelation,"Committed") = 1 Then									strDash="stroke-dasharray:7,3;"		ElseIf Instr(strRelation,"LoveAffair") = 1 Then									strDash="stroke-dasharray:2,10,6,10;" : strColor = "pink"		ElseIf Instr(strRelation,"LegalCohabitation") = 1 Then									strDash="stroke-dasharray:2,4,6,4;"		ElseIf Instr(strRelation,"Cohabitation") = 1 Then									strDash="stroke-dasharray:2,4,2,4,6,4;"		ElseIf Instr(strRelation,"NonSentimental") = 1 Then									strDash="stroke-dasharray:2,10,2,10,5,10;"		Else							strDash="stroke-dasharray:15,3,3,3,3,3;"		End If	End Select	If f.Display.Solidline = "Y" Then strDash=""	If f.Display.Color <> "" Then StrColor=f.Display.Color	' set stroke width & fontsize	nSize = GetSize(f.Position.Size.ID)	nFontSize = GetFontSize(nSize)	strWidth = "stroke-width:" & nSize & "px;"  nWidth = nSize / 2  	' get point positions	set pos = f.Position	xyTopRight=split(pos.Top.Right,",")	xyTopLeft=split(pos.Top.Left,",")	xyStartRight=split(pos.Bottom.Right,",")	xyStartLeft=split(pos.Bottom.Left,",")	xTopCenter=xyTopLeft(0)+ ( xyTopRight(0) - xyTopLeft(0) ) / 2 + dX	strLines=PointsToPath(pos.Points)	  strDataTip = f.Relation  If Not Util.IsNothing(Dic.PlurialCardinal("Child", f.Children.Count)) Then strDataTip = strDataTip & " (" & Dic.PlurialCardinal("Child", f.Children.Count) & ")"	Report.WriteFormattedLn "<a xlink:href='../{&x}' onclick='restorePopUp();' target='detail' title='{1&x}'><title>{1&x}</title>", f.Href, strDataTip	' draw bottom bar and linking line of family lines if present	If Ubound(xyStartLeft) > 0 Then		Report.WriteFormattedLn "<line x1=""{}"" y1=""{}"" x2=""{}"" y2=""{}"" style=""cursor:pointer;fill:none;stroke: {};{}{}""/>",_				xyStartLeft(0) + dX, xyStartLeft(1) + dY, xyStartRight(0) + dX, xyStartLeft(1) + dY, strColor, strDash, strWidth		Report.WriteFormattedLn "<path d=""M{}  V{}"" style=""fill:none;stroke: {};{}{}""/>",_				StrOffset(pos, dX, dY), xyStartLeft(1) + dY, strColor, strDash, strWidth	End If	' draw the top or only bar	Report.WriteFormattedLn "<line x1=""{}"" y1=""{}"" x2=""{}"" y2=""{}"" style="" cursor:pointer;fill:none;stroke: {};{}{}""/>",_			MyCStr(xyTopLeft(0) + dX), MyCStr(xyTopLeft(1) + dY), MyCStr(xyTopRight(0) + dX), MyCStr(xyTopLeft(1) + dY), strColor, strDash, strWidth	' add text label	If f.DisplayText <> "" Then		strTextColor=f.Display.Color.Label		strFill = "white"		If f.Display.Color.Label.Fill <> "" Then strFill = f.Display.Color.Label.Fill		Report.WriteFormattedLn "<rect x=""{}"" y=""{}"" height=""{}px"" width=""{}px"" style=""stroke:none;fill:{};""/>", _				MyCStr(xTopCenter - Util.GetWidth(f.DisplayText.Dimension)/2), _				MyCStr(xyTopLeft(1) + dY - nFontSize/2 - Util.GetHeight(f.DisplayText.Dimension)), _				Util.GetHeight(f.DisplayText.Dimension), Util.GetWidth(f.DisplayText.Dimension), strFill		if strTextColor = "" Then strTextColor = "black"		Report.WriteFormattedLn "<text x=""{}"" y=""{}"" style=""stroke: none;fill:{};stroke-width:1px;font-size:{}px;"">{}</text>",_				MyCStr(xTopCenter), MyCStr(xyTopLeft(1) + dY - nFontSize*5/6), strTextColor, MyCStr(nFontSize), StrPlainText(f, f.DisplayText)	End If		' check for 2.5.0.x relationship symbols using 'CustomTag' instead of f.Relationships  ' to avoid backward compatibility issues	strRelationships = CustomTag(f, "Relationships")	If strRelationships <> "" Then	 Dim Match, Matches, RegEx, xPos, strRelationship	 Set RegEx = New RegExp	 RegEx.Pattern = "[a-z]\d+"	 RegEx.Global = True	 Set Matches = RegEx.Execute(strRelationships)	 For Each Match In Matches	   strRelationship = Left(Match.Value,1)	   xPos = xyTopLeft(0) + dX + Mid(Match.Value,2)	   Select Case strRelationship	     Case "d", "m"  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#slash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xPos - 5), xyTopLeft(1) + dY, strColor, strWidth  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#slash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xPos+5), xyTopLeft(1) + dY, strColor, strWidth	     Case "s", "r"  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#slash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xPos - 5), xyTopLeft(1) + dY, strColor, strWidth	   End Select	   If strRelationship = "m" Or strRelationship = "r" Then  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#backslash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xPos), MyCStr(xyTopLeft(1) + dY), strColor, strWidth	   End If	 Next		Else  	' draw cross, oblique(s) or house symbol according to type of relationship  	If Instr(strRelation,"And")>0 Then  			strRelation=mid(strRelation,Instr(strRelation,"And")+3)  	End If  	Select Case LCase(strRelation)  	Case "divorce"  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#slash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xTopCenter - 5), xyTopLeft(1) + dY, strColor, strWidth  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#slash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xTopCenter+5), xyTopLeft(1) + dY, strColor, strWidth  	Case "legalseparation", "separationlegal"  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#slash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xTopCenter - 5), xyTopLeft(1) + dY, strColor, strWidth  	Case "widowed", "decease"  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#crossed"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xTopCenter), xyTopLeft(1) + dY, strColor, strWidth  	Case "separation"  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#backslash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xTopCenter), xyTopLeft(1) + dY, strColor, strWidth  	Case "nullity"  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#slash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xTopCenter - 10), xyTopLeft(1) + dY, strColor, strWidth  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#slash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xTopCenter), xyTopLeft(1) + dY, strColor, strWidth  			Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#slash"" style=""fill:none;stroke: {};{}""/>",_  				MyCStr(xTopCenter + 10), xyTopLeft(1) + dY, strColor, strWidth  	Case Else  			If Instr(LCase(strRelation),"cohabitation")> 0 Then  				Report.WriteFormattedLn "<use x=""{}"" y=""{}"" xlink:href=""#house{}"" style=""fill:white; stroke: {};{}""/>",_  					MyCStr(xTopCenter), MyCStr(xyTopLeft(1) + dY), f.Position.Size.ID, strColor, strWidth, f.Position.Size.ID  			End If  	End Select  End If	Report.WriteLn "</a>"	' draw 'family line' symbol	If f.FamilyLine.ID <> "" Then		Select Case f.FamilyLine.ID		Case "NoMoreChildren"			strChar = ChrW(&H25A0) ' small black box		Case "PossiblyMoreChildren"			strChar = "+"		Case "ToBeCompleted"			strChar = "X"		End Select		If Ubound(xyStartLeft) > 0 Then			x = xyStartRight(0) + dX : y = xyStartRight(1) + dY		Else			x = xyTopRight(0) + dX : y = xyTopRight(1) + dY		End If		Report.WriteFormattedLn "<g><text x='{}' y='{}' style='font-size:14px;{};stroke-width:2px;stroke-linecap:square;stroke:{};fill:{};'>{&x}</text><title>{}</title></g>", x-6, y+12, strWidth, strColor, strColor, strChar, f.FamilyLine	End IfEnd SubSub DrawLink(pl)	Dim p, xyPoints, strLines, fbxy, ftxy, ixy, fx, fp, strType, strColor, strDash, i, f	p = StrOffset(pl.Position.Points, dX, dY)	set i=pl.Individual	set f=pl.Family	If (CustomTag(i,"HideLabel") = "Y") Or (CustomTag(f,"HideLabel") = "Y") Then Exit Sub	set fp = f.Position	set ip = i.Position	If ip.GenoMap <> fp.GenoMap Then Exit Sub ' this is a 'stray' Pedigree Link	xyPoints=PointsToArray(p)	strLines=PointsToPath(p)        fbxy=PointsToArray(StrOffset(fp.Bottom.Left, dX, dY))        ftxy=PointsToArray(StrOffset(fp.Top.Left, dX, dY))	ixy=PointsToArray(StrOffset(ip, dX, dY))	If p <> "" Then		fx = xyPoints(0)	Else		fx = ixy(0)	End If	strWidth = "stroke-width:" & GetSize(pl.Position.Size.ID) & "px;"	strType=pl.PedigreeLink.ID	Report.WriteFormattedLn "<g><title>{}</title>", pl.PedigreeLink	If strType <> "Parent" Then ' it's a child link		If strType = "Foster" Then			strDash="stroke-dasharray:5;"			strColor="green"		ElseIf strType = "Adopted" Then			strDash="stroke-dasharray:5;"			strColor="blue"		Else			strColor="black"		End If		If pl.Display.Color <> "" Then strColor = pl.Display.Color		If pl.Display.Solidline = "Y" Then strDash=""		If Util.IsNothing(pl.Twin) Then ' it's not a twin			x = fx		Else			x = pl.Twin.Position + dX		End If		If Ubound(fbxy) > 0 Then 	' draw to the bottom family line if present			Report.WriteFormattedLn "<path d=""M{} {} {} L{} {}"" style=""fill:none;stroke:{};{}{}""/>", x, fbxy(1), strLines, ixy(0), ixy(1), strColor, strDash, strWidth		Else				' draw to the top family line 			Report.WriteFormattedLn "<path d=""M{} {} {} L{} {}"" style=""fill:none;stroke:{};{}{}""/>", x, ftxy(1), strLines, ixy(0), ixy(1), strColor, strDash, strWidth		End If	Else ' it's a parent link		If pl.Display.Color <> "" Then			strColor = pl.Display.Color		Else			strColor = "black"		End If		Report.WriteFormattedLn "<path d=""M{} {} {} L{} {}"" style=""fill:none;stroke: {};{}""/>", fx, ftxy(1), strLines, ixy(0), ixy(1), strColor, strWidth	End If		Report.WriteLn "</g>"			End Sub			 Sub DrawShape(s)	Dim strFill, strLine, strWidth, strPoints, xyPoints, strLines, strStart, strEnd, fShape, strDash	fShape = (s.Class = "Shape")	Set c = s.Display.Color	p = StrOffset(s.Position.Points, dX, dY)	xyPoints=PointsToArray(p)	strLines=PointsToPath(p)	strDash = Dash(s.Display.Pattern)	strFill = c.Fill & Util.IfElse(CustomTag(s, "Opacity") <> "", ";opacity:" & CustomTag(s, "Opacity"), "")  If fShape Then    If Not s.Display.IsClosed Then strFill="none"	End If	' set stroke width  strWidth = "stroke-width:" & GetSize(s.Position.Size.ID) & "px;"  If fShape Then  	if s.Display.Arrow.Begin <> "" Then  		strStart ="marker-start:url(#startarrow" & Mid(c.Line,2) & ");"  	End If  	if s.Display.Arrow.End <> "" Then  		strEnd="marker-end:url(#endarrow" & Mid(c.Line,2) & ");"  	End If  End If		If s.Comment <> "" Then		Report.WriteFormattedln "<g><title>{}</title><desc></desc>", Replace(StrPlainText(s, s.Comment),"&nbsp;", " ")	End If	' create 'path' statement to move to 1st point of shape then draw shape as a series of lines. Use 'scale' to flip y coordinates to match SVG & HTML mapping	Report.WriteFormattedLn "<path d=""M {} {} {}"" style=""fill:{}; stroke: {};{}{}{}{}""/>",_		xyPoints(0), xyPoints(1), strLines,  strFill, c.Line, strWidth, strStart, strEnd, strDash	If s.Comment <> "" Then Report.WriteLn "</g>"End SubSub DrawLabelOrSocialEntity(o)	Dim pos, xyPoints, col, txt, pad, strDash, strHoriz, strVert, strPic, strDimensions, nHoriz, nVert, nHeight, nWidth, nRowHeight, nSize, strUID, oPic, strLang, strThumbFile, strThumbName, strPath, y, i, strRoot, strExt, strFill, fOutline, strWidth	Set pos = o.Position	xyPoints = PointsToArray(StrOffset(pos, dX, dY))	Set col = o.Display.Color	Set txt = o.Text	pad=txt.padding	strLang = CustomTag(o, "Language")	If strLang <> "" And strLang <> Session("ReportLanguage") Then Exit Sub	strDash = Dash(o.Display.Border.Pattern)	nWidth=Util.GetWidth(o.Text.Dimension)	nHeight=Util.GetHeight(o.Text.Dimension)	if Ubound(o.Text.Display) > -1 Then nRowHeight=nHeight / (Ubound(o.Text.Display) + 1)	Select Case Lcase(txt.Alignment.Horizontal.ID)		Case "left"	: strHoriz = "start"	: nHoriz = xyPoints(0) + pad		Case "right"	: strHoriz = "end"	: nHoriz = xyPoints(0) + pos.Width - pad		Case Else	: strHoriz = "middle"	: nHoriz = xyPoints(0) + pos.Width/2	End Select	If nHeight > pos.Height - 2 * pad Then    nVert = xyPoints(1) + pad 	'	If text overflow treat as if vertical alignment 'top' was specified.  Else  	Select Case LCase(txt.Alignment.Vertical.ID)  		Case "bottom"	: nVert = xyPoints(1) + pos.Height - pad -nHeight	  		Case "top"	: nVert = xyPoints(1) + pad  		Case Else	: nVert = xyPoints(1) + (pos.Height - nHeight)/2  	End Select 	End If  nSize = GetSize(o.Position.Size.ID)  nFontSize = GetFontSize(nSize)	nVert = nVert - GetOffset(nSize)		Set oPic = o.Pictures.Primary	If Util.IsNothing(oPic) Then	   If o.Pictures.Count > 0 Then oPic = o.Pictures(0)	End If	strStyle = CustomTag(o,"Picture.Style")	If Mid(txt,1,9) = "picture=""" Then		' old style picture in label		Report.LogWarning ConfigMessage("ErrorPicLabelDeprecated")		If Util.IsNothing(oPic) Then			strStyle = mid(txt,instrRev(txt,"""")+1)			Set oPic= oPicIndex.entry(mid(txt,10,instr(10,txt,"""") - 10))      If Not Util.IsNothing(Opic) Then Set oPic = oPic.Object(0)			If Util.IsNothing(oPic) Then Report.LogError Util.FormatString(ConfigMessage("FmtInvalidPictureID"), mid(txt,10,instr(10,txt,"""") - 10), o.ID, g.Name)		End If	End If	strFile = ""	nWidth = pos.Width	nHeight = pos.Height	If IsTrue(CustomTag(o, "Picture.Display"), True) And Not Util.IsNothing(oPic) And Session("IrfanViewPath") <> "" Then		 ' label is a placeholder for a picture		If o.ID <> "" Then strThumbName = oThumbnails.Item(o.ID)		strFile = oPic.Path.FileUnique		i = InstrRev(strFile, ".")		If i > 0 Then			strRoot = mid(strFile, 1, i-1)			strExt = Mid(strFile, i)		Else			strRoot = strFile			strExt = ".jpg"		End If		strFile="thumbnails/" & strRoot & "_" & o.ID & strExt		strPath = oPic.Path		i = InstrRev(strPath, ".")		If i > 0 Then			strRoot = mid(strPath, 1, i-1)			strExt = Mid(strPath, i)		Else			strRoot = strPath			strExt = ".jpg"		End If		If strThumbName = "" Then			strThumbDate = ReportGenerator.FileUploadedGetTimestamp(strFile)			strPictureDate = GetFileTimestamp(strPath)			If strPictureDate > strThumbDate Then strThumbDate = ""			If strThumbDate = "" Then				Report.LogComment Util.FormatString(ConfigMessage("FmtThumbnailCreate"), strPath)				strThumbName = oFso.GetTempName & strExt				strThumbSize = PicResize(oPic, strTempFldr & strThumbName, nWidth - (pad * 2), nHeight - (pad * 2), IsTrue(CustomTag(o,"Picture.FixRatio"),True), True)				oThumbnails.Item(o.ID) = strThumbName & "|" & strThumbSize			Else				' Report.LogComment Util.FormatString(ConfigMessage("FmtThumbnailUpToDate"), strPath)				strThumbSize = PicRedim(oPic, nWidth - (pad * 2), nHeight - (pad * 2), IsTrue(CustomTag(o,"Picture.FixRatio"),True), True)			End If		Else			strThumbSize = Mid(strThumbName, Instr(strThumbName, "|") + 1)			strThumbName = Mid(strThumbName, 1, Instr(strThumbName,"|")-1)		End If		nResponse = ReportGenerator.FileUpload(strTempFldr & strThumbName, strFile)		strFile="../" & strFile		If LCase(CustomTag(o, "Picture.FitLabel")) = "y" Then			nWidth = Util.GetWidth(strThumbSize) + (pad * 2)			nHeight = Util.GetHeight(strThumbSize) + (pad * 2)		End If					Else		strFile = ""	End If	If o.Comment <> "" Then		Report.WriteFormattedln "<g><title>{}</title><desc></desc>", Replace(StrPlainText(o, o.Comment),"&nbsp;", " ")	End If		fOutline = False  If fGamma Then      fOutline = o.Text.DrawOutline  Else      fOutline = False  End If'	If VarType(fOutline) <> vbBoolean Then fOutline = False		strFill = col.Fill	If fOutline Then strFill = "none"		strWidth = "stroke-width:" & GetSize(o.Display.Border.Width.ID) & "px;"	Report.WriteFormattedLn "<rect  x=""{}"" y=""{}"" width=""{}px"" height=""{}px""  style=""opacity:{};fill:{};{}stroke: {};{}""/>",_				            xyPoints(0), xyPoints(1), nWidth, nHeight,_                            Util.IfElse(strFill<>"none",Util.FirstNonEmpty(CustomTag(o, "Opacity"), 1),1),_                            strFill, strWidth, col.Border, strDash	If strFile <> "" Then		' Make picture clickable on SVG to display full sized image		strPath = oPic.Path.Report		If Not Instr(strPath,"://") > 0 Then 			strPath = "../" & strPath		ElseIf Instr(strPath,"file://") = 1 Then            If (Session("BasePath") <> "" And Instr(strPath, Session("BasePath")) = 8) Then strPath = "..\.." & Mid(strPath, 8+Len(Session("BasePath")))		End If		Report.WriteFormattedLn "<a xlink:href='{0&t}' target='_blank'>", strPath		Report.WriteFormattedLn "<image x=""{}"" y=""{}"" width=""{}px"" height=""{}px"" xlink:href=""{}"" style=""{}"" preserveAspectRatio=""xMinYMin meet""/>",_					xyPoints(0) + pad, xyPoints(1) + pad, Util.GetWidth(strThumbSize), Util.GetHeight(strThumbSize), strFile, strStyle		Report.WriteLn "</a>"	End If	strUID = GetUID	Report.WriteFormattedLn "<clipPath id=""c{}"">" & _				"<rect x=""{}"" y=""{}"" width=""{}px"" height=""{}px""/>" & _				"</clipPath>", strUID, MyCStr(xyPoints(0) + pad/2), MyCStr(xyPoints(1) + pad/2), nWidth - pad, nHeight - pad	y = nVert + 0	Report.WriteFormattedLn "<g clip-path=""url(#c{})""><text x=""{}"" y=""{}"" style=""text-anchor:{};fill:{};stroke: {};font-size:{}px;pointer-events:none;"">", strUID, MyCStr(nHoriz), MyCStr(y), strHoriz, col.Text, col.Fill, MyCStr(nFontSize)	If Mid(txt,1,9)<>"picture=""" Then		For Each line in o.Text.Display			y = y + nRowHeight			If line <> "" And line <> CHR(10) Then        If fOutline Then Report.WriteFormattedLn "<tspan x=""{}"" y=""{}"">{&x}</tspan>", MyCStr(nHoriz), MyCStr(y), line        Report.WriteFormattedLn "<tspan x=""{}"" y=""{}"" style=""stroke:none;"">{&x}</tspan>", MyCStr(nHoriz), MyCStr(y), line      End If		Next	End If	Report.WriteLn "</text></g>"		If o.Comment <> "" Then Report.WriteLn "</g>"End SubSub DrawEmotionalRelationship(r)' This is a little tricky as arrows start & end on bounding boxes of individuals and not at their centre	Dim xyPoints, xy1xy2Int, xyStart, xyEnd , e1Pos, e2Pos, strPath, strBegin, strEnd, e1, e2	Set e1 = r.Entity1	Set e2 = r.Entity2	If e1.Class="Individual" Then		If CustomTag(e1,"HideLabel") = "Y" Then Exit Sub	End If	If e2.Class="Individual" Then		If CustomTag(e2,"HideLabel") = "Y" Then Exit Sub	End If    ' get any intermediate points on the (poly)line	xyPoints=PointsToArray(StrOffset(r.Position.Points, dX, dY))	strPath=PointsToPath(StrOffset(r.Position.Points, dX, dY))	Set e1Pos = e1.Position	Set e2Pos = e2.Position    ' Find intersection of line with entity1	' first determine exterior point of line	If Ubound(xyPoints) > 0 Then	' it has intermediate points so get the 1st one as exterior end of line		xExt = xyPoints(0)		yExt = xyPoints(1)	Else 				' otherwise use centre point of entity 2 as exterior end of line		If e2.class="SocialEntity" Then			xExt = e2Pos.x + dX+e2Pos.Width/2				yExt = e2Pos.y + dY+e2Pos.height/2		Else			xExt = e2Pos.x + dX				yExt = e2Pos.y + dY		End If	End If	'then find the interior point	If e1.class="SocialEntity" Then	' get the interior point i.e. centre of label or social entity		xy1xy2Int = PointsToArray(StrOffset(e1Pos, dX, dY))							' and find intersection with its border		xyStart = LineBoxIntersect(e1Pos.x + dX + e1Pos.Width/2, e1Pos.y + dY+e1Pos.height/2, xExt, yExt, xy1xy2Int(0), xy1xy2Int(1), e1Pos.Width, e1Pos.height, e1Pos.Size.ID)	Else						' it's an individual so find its bounding box		flg1 = e1.Display.Flags.Enable		If Instr(flg1,"b")>0 or Instr(e1.Display.Flags.Disable,"g")=0  Then		' border required			xy1xy2Int = BoundingBox(e1, flg1)							' and find intersection with it			xyStart = LineBoxIntersect(e1Pos.x + dX, e1Pos.y + dY, xExt, yExt, xy1xy2Int(0)-3, xy1xy2Int(1)-3, Abs(xy1xy2Int(2)-xy1xy2Int(0))+6, Abs(xy1xy2Int(3)-xy1xy2Int(1))+6)		Else			xyStart = Array(e1Pos.x + dX, e1Pos.y + dY)		End If	End If	' Find intersection of line with entity/Entity2	If Ubound(xyPoints) > 0 Then	' it has intermediate points so get the last one as exterior end of line		xExt = xyPoints(Ubound(xyPoints)-1)		yExt = xyPoints(Ubound(xyPoints))	Else 				' otherwise use centre point of entity 1 as exterior end of line		If e1.class="SocialEntity" Then			xExt = e1Pos.x + dX+e1Pos.Width/2				yExt = e1Pos.y + dY+e1Pos.height/2		Else			xExt = e1Pos.x + dX			yExt = e1Pos.y + dY		End If	End If		If e2.class="SocialEntity" Then	' get the interior point		xy1xy2Int = PointsToArray(StrOffset(e2Pos, dX, dY))							' and find intersection with its border		xyEnd = LineBoxIntersect(e2Pos.x + dX+e2Pos.Width/2, e2Pos.y + dY+e2Pos.height/2, xExt, yExt, xy1xy2Int(0), xy1xy2Int(1), e2Pos.Width, e2Pos.height)	Else						' it's an individual so find its bounding box		flg2 = e2.Display.Flags.Enable		If Instr(flg2,"b")>0 or Instr(e2.Display.Flags.Disable,"g")=0 Then		' border required			xy1xy2Int = BoundingBox(e2, flg2)							' and find intersection with it			xyEnd = LineBoxIntersect(e2Pos.x + dX, e2Pos.y + dY, xExt, yExt, xy1xy2Int(0)-3, xy1xy2Int(1)-3, Abs(xy1xy2Int(2)-xy1xy2Int(0))+6, Abs(xy1xy2Int(3)-xy1xy2Int(1))+6)		Else			xyEnd = Array(e2Pos.x + dX, e2Pos.y + dY)		End If	End If	nWidth = GetSize(r.Position.Size.ID)	nWidth1 = nWidth	strDash = ""	strMid = ""	strEnd = ""	nOffset = ""	nWider = 2	nWidest = 4	Select Case r.EmotionalLink.ID	Case "Plain"		: StrColor = "black"	Case "Indifferent"	: StrColor = "black"	: strDash= "1,3"	Case "Distant"		: StrColor = "black"	: strDash= "5,7"	Case "Cutoff"		: StrColor = "red"	: strMid = "bar"		: strDash= "5,7"	Case "CutoffRepaired"	: StrColor = "green"	: strMid = "barcircle"		: strDash= "4,7"	Case "Discord"		: StrColor = "red"	: nWidth = nWidth * nWider	: strDash= "5,5"	Case "Hate"		: StrColor = "red"	: nWidth = nWidth * nWidest	: strDash= "5,5"	Case "Harmony"		: StrColor = "green"	Case "Friendship"	: StrColor = "green"	: nWidth = nWidth * nWider	Case "Intimacy"		: StrColor = "green"	: nWidth = nWidth * nWider	Case "Love"		: StrColor = "green"	: strMid = "circlegreen"	Case "InLove"		: StrColor = "green"	: strMid = "linkgreen"	Case "Psyritual"		: StrColor = "green"	:  nWidth = nWidth * nWider	Case "Fused"		: StrColor = "red"	: nWidth = nWidth * nWidest	Case "Distrust"		: StrColor = "black"	: 	Case "Hostile", "HostileDistant"				  StrColor = "red"	: nWidth = nWidth * nWider	: strDash = "2.5,10"	Case "HostileClose"	: StrColor = "black"	: nWidth = nWidth * 1.5	Case "HostileFused"	: StrColor = "black"	: nWidth = nWidth * nWider * 1.5	Case "Violence", "ViolenceDistant"				  StrColor = "red"	: nWidth = nWidth * nWider	: strDash = "2.5,5"	Case "ViolenceClose"	: StrColor = "black"	: nWidth = nWidth * 1.5	Case "ViolenceFused"	: StrColor = "black"	: nWidth = nWidth * nWider * 1.5	Case "Abuse", "AbusePhysical"				  StrColor = "blue"	: nWidth = nWidth * nWider	: strDash = "2.5,10"	Case "AbuseEmotional"	: StrColor = "blue"					: strDash = "2.5,5"	Case "AbuseSexual"	: StrColor = "blue"	: nWidth = nWidth * nWider	: strDash = "2.5,5"	Case "AbuseNeglect"	: StrColor = "blue" 	: strEnd="endarrowblue" 	: strDash = "5,5"	Case "Jealous"		: StrColor = "red"	: strMid = "diamondred"	: strEnd="endarrowred" 	Case "Manipulative"	: StrColor = "red"	: strMid = "cross"	: strEnd="endarrowred" 	Case "Controlling"	: StrColor = "red"	: strMid = "crossboxred": strEnd="endarrowred" 	Case "FocusedOn"	: StrColor = "black"				: strEnd="endarrowblack" 	Case "FocusedOnNegatively"	: StrColor = "black" 	: nWidth = nWidth * nWider	: strDash = "2.5,10"	: strEnd="endarrowblack" 	Case "Fan"		: StrColor = "black"	: strMid = "circleblack": strEnd="endarrowblack" 	Case "Limerence"	: StrColor = "black"	: strMid = "linkblack"	: strEnd="endarrowblack" 	Case "NeverMet"		: StrColor = "black"	: strMid = "crossboxblack"		Case "other"		: StrColor = "black"	: strMid = "box"	: strMid1 = "query"		End Select	If strMid <> "" And strPath = "" Then		If xyEnd(0) > xyStart(0) Then			xMid = xyStart(0) + (xyEnd(0) - xyStart(0)) / 2		Else			xMid = xyEnd(0) + (xyStart(0) - xyEnd(0)) / 2		End If		If xyEnd(1) > xyStart(1) Then			yMid = xyStart(1) + (xyEnd(1) - xyStart(1)) / 2		Else			yMid = xyEnd(1) + (xyStart(1) - xyEnd(1)) / 2		End If		strPath = MyCStr(xMid) & " " & MyCStr(yMid)	End If	Report.WriteFormattedLn "<g><title>{&x}</title><desc>{}</desc>", r.EmotionalLink, Replace(StrPlainText(r, r.Comment),"&nbsp;", " ")	' create 1st 'path' overlay to move to 1st point of line then draw line as a series of lines. 	Report.WriteFormattedLn "<path d=""M{} {} {} L{} {}"" style=""{}""/>",_			MyCStr(xyStart(0)), MyCStr(xyStart(1)), strPath, MyCStr(xyEnd(0)), MyCStr(xyEnd(1)), _			Util.FormatPhrase("fill:none; stroke-linecap:butt; stroke:{0};[stroke-width:{1};][stroke-dasharray:{2};][marker-mid:url(#{3});][marker-end:url(#{4});]",strColor, nWidth, strDash, strMid, strEnd)	fMore = False : strDash ="" : nOffset="" :strMid="" : strEnd=""	Select Case r.EmotionalLink.ID	Case "Intimacy"		:fMore = True : StrColor = "green"	: nWidth = nWidth  * 2 		: strDash = "2.5,10"	Case "Distrust"		:fMore = True : StrColor = "red"	: nWidth = nWidth * nWidest 	: strDash = "2.5,5"	Case "Hostile", "HostileDistant"				 fMore = True : StrColor = "red"	: nWidth = nWidth1 * nWidest: 	: strDash = "2.5,10" : nOffset = 6.25	Case "Psyritual"	:fMore = True : StrColor = "darkseagreen"	:  strDash = "5,5" : nWidth = nWidth / nWider	Case "Hostileclose", "HostileFused"				 fMore = True : StrColor = "red"	: nWidth = nWidth1 * nWider	: strDash = "2.5,10"	Case "FocusedOnNegatively"         fMore = True	: StrColor = "black"  : nWidth = nWidth1 * nWidest : strDash = "2.5,10" : nOffset = 6.25	Case "Violence", "ViolenceDistant"				 fMore = True : StrColor = "red"	: nWidth = nWidth1 * nWidest: 	: strDash = "2.5,5" : nOffset = 3.75	Case "ViolenceClose", "ViolenceFused"				 fMore = True : StrColor = "red"	: nWidth = nWidth1 * nWider	: strDash = "2.5,5"	Case "Abuse", "AbusePhysical"				 fMore = True : StrColor = "blue"	: nWidth = nWidth1 * nWidest	: strDash = "2.5,10" : nOffset = 6.25	Case "AbuseEmotional"	 fMore = True : StrColor = "blue"	: nWidth = nWidth1 * nWider	: strDash = "2.5,5" : nOffset = 3.75	Case "AbuseSexual"	 fMore = True : StrColor = "blue"	: nWidth = nWidth1 * nWidest	: strDash = "2.5,5" : nOffset = 3.75	Case "other"		 fMore = True : StrColor = "none"	: strMid = strMid1	End Select	' add 2nd overlay for complex lines	If fMore Then Report.WriteFormattedLn "<path d=""M{} {} {} L{} {}"" style=""{}""/>",_			MyCStr(xyStart(0)), MyCStr(xyStart(1)), strPath, MyCStr(xyEnd(0)), MyCStr(xyEnd(1)), _			Util.FormatPhrase("fill:none; stroke-linecap:butt; stroke:{0};[stroke-width:{1};][stroke-dasharray:{2};][marker-mid:url(#{3});][marker-end:url(#{4});][stroke-dashoffset:{5};]",strColor, nWidth, strDash, strMid, strEnd, nOffset)	fMore = False : strDash ="" : nOffset="" :strMid="" : strEnd=""	Select Case r.EmotionalLink.ID	Case "HostileDistant"	: fMore = True : StrColor = "black"	: nWidth = nWidth1 / 2: 	: strDash = "5,6" :nOffset= 6.25	Case "HostileClose", "HostileFused"				  fMore = True : StrColor = "red"	: nWidth = nWidth1 * nWidest: 	: strDash = "2.5,10" : nOffset = 6.25	Case "FocusedOnNegatively"         fMore = True	: StrColor = "black"  : nWidth = nWidth1	Case "ViolenceDistant", "AbusePhysical"				  fMore = True : StrColor = "black"	: nWidth = nWidth1 / 2: 	: strDash = "5,6" :nOffset= 6.25	Case "ViolenceClose", "ViolenceFused"				  fMore = True : StrColor = "red"	: nWidth = nWidth1 * nWidest: 	: strDash = "2.5,5" : nOffset = 3.75	End Select	' and 3rd overlay for even more complex lines	If fMore Then Report.WriteFormattedLn "<path d=""M{} {} {} L{} {}"" style=""{}""/>",_			MyCStr(xyStart(0)), MyCStr(xyStart(1)), strPath, MyCStr(xyEnd(0)), MyCStr(xyEnd(1)), _			Util.FormatPhrase("fill:none; stroke-linecap:butt; stroke:{0};[stroke-width:{1};][stroke-dasharray:{2};][marker-mid:url(#{3});][marker-end:url(#{4});][stroke-dashoffset:{5};]",strColor, nWidth, strDash, strMid, strEnd, nOffset)	Report.Write "</g>"End SubSub DrawSocialRelationship(r)' This is a little tricky as arrows start & end on bounding boxes of individuals and not at their centre	Dim xyPoints, xy1xy2Int, xyStart, xyEnd , e1Pos, e2Pos, strPath, strBegin, strEnd, e1, e2	Set e1 = r.Entity1	Set e2 = r.Entity2	If e1.Class="Individual" Then		If CustomTag(e1,"HideLabel") = "Y" Then Exit Sub	End If	If e2.Class="Individual" Then		If CustomTag(e2,"HideLabel") = "Y" Then Exit Sub	End If	Set e1Pos = e1.Position	Set e2Pos = e2.Position	xyPoints=PointsToArray(StrOffset(r.Position.Points, dX, dY))	strPath=PointsToPath(StrOffset(r.Position.Points, dX, dY))    ' get any intermediate points on the (poly)line	xyPoints=PointsToArray(StrOffset(r.Position.Points, dX, dY))	strPath=PointsToPath(StrOffset(r.Position.Points, dX, dY))    ' Find intersection of line with entity1	' first determine exterior point of line	If Ubound(xyPoints) > 0 Then	' it has intermediate points so get the 1st one as exterior end of line		xExt = xyPoints(0)		yExt = xyPoints(1)	Else 				' otherwise use centre point of entity 2 as exterior end of line		If r.entity2.class="SocialEntity" Then			xExt = e2Pos.x + dX+e2Pos.Width/2				yExt = e2Pos.y + dY+e2Pos.height/2		Else			xExt = e2Pos.x + dX				yExt = e2Pos.y + dY		End If	End If	'then find the interior point	If r.entity1.class="SocialEntity" Then	' get the interior point i.e. centre of label or social entity		xy1xy2Int = PointsToArray(StrOffset(e1Pos, dX, dY))							' and find intersection with its border		xyStart = LineBoxIntersect(e1Pos.x + dX + e1Pos.Width/2, e1Pos.y + dY+e1Pos.height/2, xExt, yExt, xy1xy2Int(0), xy1xy2Int(1), e1Pos.Width, e1Pos.height)	Else						' it's an individual so find its bounding box		flg1 = r.entity1.Display.Flags.Enable		If r.Display.Arrow.Begin <> "" Then flg1 = flg1 & "<>"		xy1xy2Int = BoundingBox(r.entity1, flg1)							' and find intersection with it		xyStart = LineBoxIntersect(e1Pos.x + dX, e1Pos.y + dY, xExt, yExt, xy1xy2Int(0), xy1xy2Int(1), Abs(xy1xy2Int(2)-xy1xy2Int(0)), Abs(xy1xy2Int(3)-xy1xy2Int(1)))	End If	' Find intersection of line with entity2	If Ubound(xyPoints) > 0 Then	' it has intermediate points so get the last one as exterior end of line		xExt = xyPoints(Ubound(xyPoints)-1)		yExt = xyPoints(Ubound(xyPoints))	Else 				' otherwise use centre point of entity 1 as exterior end of line		If r.entity1.class="SocialEntity" Then			xExt = e1Pos.x + dX+e1Pos.Width/2				yExt = e1Pos.y + dY+e1Pos.height/2		Else			xExt = e1Pos.x + dX				yExt = e1Pos.y + dY		End If	End If		If r.entity2.class="SocialEntity" Then	' get the interior point		xy1xy2Int = PointsToArray(StrOffset(e2Pos, dX, dY))							' and find intersection with its border		xyEnd = LineBoxIntersect(e2Pos.x + dX+e2Pos.Width/2, e2Pos.y + dY+e2Pos.height/2, xExt, yExt, xy1xy2Int(0), xy1xy2Int(1), e2Pos.Width, e2Pos.height)	Else						' it's an individual so find its bounding box		flg2 = r.entity2.Display.Flags.Enable		If r.Display.Arrow.End <> "" Then flg2 = flg2 & "<>"		xy1xy2Int = BoundingBox(r.entity2, flg2)							' and find intersection with it		xyEnd = LineBoxIntersect(e2Pos.x + dX, e2Pos.y + dY, xExt, yExt, xy1xy2Int(0), xy1xy2Int(1), Abs(xy1xy2Int(2)-xy1xy2Int(0)), Abs(xy1xy2Int(3)-xy1xy2Int(1)))	End If		strWidth = "stroke-width:" & GetSize(r.Position.Size.ID) & "px;"	strLine=Util.FirstNonEmpty(r.Display.Color.Line, "black")	if r.Display.Arrow.Begin <> "" Then		strStart ="marker-start:url(#startarrow" & Mid(strLine,2) & ");"	End If	if r.Display.Arrow.End <> "" Then		strEnd="marker-end:url(#endarrow" & Mid(strLine,2) & ");"	End If	Report.WriteFormattedLn "<g><title>{&x}</title><desc>{}</desc>", r.Connection, Replace(StrPlainText(r, r.Comment),"&nbsp;", " ")	' create 'path' statement to move to 1st point of line then draw line as a series of lines. 	Report.WriteFormattedLn "<path d=""M{} {} {} L{} {}"" style=""fill:none; stroke: {};{}{}{}{}""/>",_		MyCStr(xyStart(0)), MyCStr(xyStart(1)), strPath, MyCStr(xyEnd(0)), MyCStr(xyEnd(1)), strLine, strWidth, Dash(r.Display.Pattern), strStart, strEnd	Report.Writeln "</g>"End SubSub DrawTwin(t)	Dim strSep, strWidth, strDash, strPath		strWidth = "stroke-width:" & GetSize(t.Position.Size.ID) & "px;"	If Not (t.TwinLink.ID = "Identical") And Not (t.Display.Solidline = "Y") Then strDash = "stroke-dasharray:6,4,2,4;"	strSep="M"	For each s in t.Siblings.SortBy("Position.x")		If Not (CustomTag(s,"HideLabel") = "Y") Then		strPath = strPath & strSep &  StrOffset(s.Position, dX, dY)			strSep = " L"		End If	Next	If Instr(strPath, " L") > 0 Then Report.WriteFormattedLn "<path d=""{}"" style=""fill:none; stroke: {};{}{}""/>",_						strPath, Util.FirstNonEmpty(t.Display.Color, "none"), strWidth, strDashEnd SubSub DrawSecret(o)  Dim nSize, nHeight, oPos, x, y, strColor  Set oPos = o.Position  strColor = Util.FirstNonEmpty(o.Color, "black")  nSize = GetScale(GetSize(oPos.Size.ID))  nHeight = (tan(3.1419 /3) * nSize / 2) ' O = Tan(60) x A  x = oPos.x + dX  y = oPos.y + dY	If o.Comment <> "" Then		Report.WriteFormattedln "<g><title>{}</title><desc></desc>", StrDicExt("Secret","","Secret", "", "2.5.0.4") & ": " & Replace(StrPlainText(o, o.Comment),"&nbsp;", " ")	End If  Report.WriteFormattedLn "<path d=""M {} {} L{} {} L{} {} z"" style=""stroke:{};stroke-width:3pt;fill:{};""/>", _      MyCStr(x - (nSize / 2)), MyCStr(y + (nHeight * 0.4)), MyCStr(x), MyCStr(y - (nHeight * 0.6)), MyCStr(x + (nSize / 2)), MyCStr(y + (nHeight * 0.4)), strColor, strColor	If o.Comment <> "" Then		Report.WriteFormattedln "</g>"  End IfEnd Sub		Sub DrawSymbol(o)  Dim nSize, nHalf, nHeight, oPos, x, y, strColor  Set oPos = o.Position  strColor = Util.FirstNonEmpty(o.Color, "black")  nSize = GetScale(GetSize(oPos.Size.ID))  nHalf = nSize / 2  x = oPos.x + dX  y = oPos.y + dY  Report.WriteFormattedLn "<path d=""M {} {} L {} {} M {} {} L {} {}"" style=""stroke:{};stroke-width:2pt;fill:none;""/>", _      x - 5, y - 5, x + 5, y + 5, x - 5, y + 5, x + 5, y - 5, strColor  Report.WriteFormattedLn "<path d=""M {} {} A{} {} 0 1 0 {} {} A{} {} 0 1 1 {} {}"" style=""stroke:{};stroke-width:2pt;fill:none;""/>", _      x - nSize, y - nHalf, nHalf, nHalf, x, y - nHalf, nHalf, nHalf, x + nSize, y - nHalf, strColorEnd Sub		Sub DrawRectangle(boundary, fill, stroke, strWidth)	If boundary <> "" Then 		arrTemp = Split(boundary,",")		Report.WriteFormattedLn "<rect x=""{}"" y=""{}"" width=""{}px"" height=""{}px"" style=""stroke:{};{}fill:{};""/>",_				arrTemp(0) + dX, arrTemp(1) + dY, arrTemp(2) - arrTemp(0), arrTemp(3) - arrTemp(1), stroke, strWidth, fill	End IfEnd SubFunction MyCStr(num)	MyCStr = Replace(CStr(num),",",".")End FunctionFunction PointsToArray(points)	PointsToArray=split(points,",")End FunctionFunction PointsToPath(points)	PointsToPath=replace(points,","," ")End FunctionSub DrawQuadrants(quadrants, x, y, nScale1, shape, nSize, nOffset)    Dim strColor, strScale, strClip        strScale = MyCStr(nScale1 / 18)    strClip = ""    If shape = "rect" Then strClip = "clip-path=""url(#clip" & nSize & ")"""    Report.WriteFormattedLn "<g {} transform=""translate({},{})""><g transform=""translate(0,{})"">", strClip, x, y, nOffset    '    If (quadrants.mask and 1) > 0 Then    	strColor=Util.FirstNonEmpty(quadrants.Top.Left,"red")    	Report.WriteFormattedLn "<use xlink:href=""#{}"" transform=""scale({})"" style=""stroke: none;fill:{};""/>", shape, strScale, strColor    End If    If (quadrants.mask and 2) > 0 Then    	strColor=Util.FirstNonEmpty(quadrants.Top.Right,"red")    	Report.WriteFormattedLn "<use xlink:href=""#{}"" transform=""rotate(90)scale({})"" style=""stroke: none;fill:{};""/>", shape, strScale, strColor    End If    If (quadrants.mask and 8) > 0 Then    	strColor=Util.FirstNonEmpty(quadrants.Bottom.Right,"red")    	Report.WriteFormattedLn "<use xlink:href=""#{}"" transform=""rotate(180)scale({})"" style=""stroke: none;fill:{};""/>", shape, strScale, strColor    End If    If (quadrants.mask and 4) > 0 Then    	strColor=Util.FirstNonEmpty(quadrants.Bottom.Left,"red")    	Report.WriteFormattedLn "<use xlink:href=""#{}"" transform=""rotate(270)scale({})"" style=""stroke: none;fill:{};""/>", shape, strScale, strColor    End If    Report.WriteLn "</g></g>"      End SubFunction Dash(pattern)Select Case pattern	case ""		: Dash=""	case "-"	: Dash="stroke-dasharray:5,5;"	case "."	: Dash="stroke-dasharray:1,4;"	case "-."	: Dash="stroke-dasharray:6,4,2,4;"	case "-.."	: Dash="stroke-dasharray:6,4,2,4,2,4;"	case "-..."	: Dash="stroke-dasharray:6,4,2,4,2,4,2,4;"	case "_"	: Dash="stroke-dasharray:10,4;"	case "-*"	: Dash="stroke-dasharray:4,10;"	case ".*"	: Dash="stroke-dasharray:2,5;"	case "-*.*"	: Dash="stroke-dasharray:5,5,2,5;"	case "-*.*.*"	: Dash="stroke-dasharray:5,5,2,5,2,5;"	case "-*.*.*.*"	: Dash="stroke-dasharray:5,5,2,5,2,5,2,5;"	case "..*"	: Dash="stroke-dasharray:2,2,2,4,3;"End SelectEnd FunctionFunction LineBoxIntersect(x1, y1, x2, y2, xtl, ytl, width, height)' find intersection of line with rectangle by checking for intersect with each side	Dim t, x, y, dx, dy	dx = x2 - x1	If dx <> 0 Then	' avoids divide by zero		t=(xtl-x1)/dx		y= Round(y1 * (1 - t) + y2 * t)		If t>= 0 And t <=1 and y <= ytl + height and y >= ytl+0 Then ' intersects on left side			LineBoxIntersect=split(xtl & "," & y,",")			Exit Function		End If		t=(xtl+width-x1)/dx		y= Round(y1 * (1 - t) + y2 * t)		If t>= 0 And t <=1 and y <= ytl + height and y >= ytl+0 Then ' intersects on right side			LineBoxIntersect=split(xtl+width & "," & y,",")			Exit Function		End If	End If	dy = y2 - y1	if dy <> 0 Then	' avoids divide by zero		t=(ytl-y1)/dy			x= Round(x1 * (1 - t) + x2 * t)		If t>= 0 And t <=1 and x >= xtl+0 and x <= xtl + width Then ' intersects on top side			LineBoxIntersect=split(x & "," & ytl,",")			Exit Function		End If		t=(ytl+height-y1)/dy		x= Round(x1 * (1 - t) + x2 * t)		If (t>= 0) And (t <= 1) And (x >= xtl + 0) And (x <= (xtl + width)) Then ' intersects on bottom side			LineBoxIntersect=split(x & "," & ytl+height,",")			Exit Function		End If	End if	'Report.LogError g.Name & ": No intersection found for line="  & x1 & "," & y1 & " - " & x2 &"," & y2 & " box=" & xtl & "," & ytl &" " & xtl+width & "," & ytl+height	LineBoxIntersect=split("0,0",",")End FunctionFunction BoundingBox(o, flags)	Dim x, y, nSize, xyPoints	If (Instr(flags, "b")>0 Or Instr(flags,"<>") > 0) And o.Position.BoundaryRect <> "" Then		BoundingBox = PointsToArray(StrOffset(o.Position.BoundaryRect, dX, dY))	Else		x=o.Position.x + dX		y=o.Position.y + dY		nSize = GetSize(o.Position.Size.ID)		If Instr(flags, "b")>0 Or Instr(flags,"<>") > 0 Then			BoundingBox = split(x - (3 * nSize)&","& y + (3 * nSize)&"," & x + 6 * nSize &","& y - 8 * nSize,",")		Else			BoundingBox = split(x - nHalf&","& y - nHalf&"," & x + nHalf &","& y + nHalf,",")		End If	End IfEnd FunctionFunction GetUID	nUIDcount =  nUIDcount + 1	GetUID = CStr(nUIDcount)End FunctionFunction rgbpaler(strCol)' halve the lightness of a colour by converting from RGB to HSL format, halving the the 'darkness' and' then convert back to RGB    Dim rgb, hsl, tmp    Execute("hsl=rgb2hsl(&H" & Mid(strCol,2,2) & ",&H" & Mid(strCol,4,2) & ",&H" & Mid(strCol,6,2) & ")")    tmp = hsl(2)    hsl(2) = hsl(2) + (1 - hsl(2)) / 2    rgb = hsl2rgb(hsl(0), hsl(1), hsl(2))    Report.LogComment hsl(0)*360 & "," & hsl(1)*100 & "," & hsl(2)*100 & " " & rgb(0) & "," & rgb(1) & "," & rgb(2)    rgbpaler = "#" & right("0" & hex(Int(rgb(0)+0.5)),2) & right("0" & hex(Int(rgb(1)+0.5)),2) & right("0" & hex(Int(rgb(2)+0.5)),2)End FunctionFunction rgb2hsl(r, g, b)    Dim max, min, h,s,l,d    r = r / 255: g =g / 255: b = b / 255    max = r    if g > max Then max = g    if b > max Then max = b    min = r    If g < min Then min = g    If b < min Then min = b    l = (max + min) / 2    If max = min Then        h = 0: s = 0    ' achromatic    Else        d = max - min        If l >= 0.5 Then          s = d / (2 - max - min)        Else            s = d / (max + min)        End If        r1 = ((max-r)/6+d/2)/d        g1 = ((max-g)/6+d/2)/d        b1 = ((max-b)/6+d/2)/d        Select Case max            Case r                  h = b1 - g1            Case g                  h = 1/3 + r1 - b1            Case b                  h = 2/3 + g1 - r1        End Select        If h > 1 Then h = h-1        If h < 0 Then h = h+1    End If    rgb2hsl = Array(h, s, l)End FunctionFunction hsl2rgb(h, s, l)    Dim r, g, b    If s = 0 Then        r = l: g = l: b = l ' achromatic    Else        q = Util.IfElse(l < 0.5 , l * (1 + s) , l + s - l * s)        p = 2 * l - q        r = hue2rgb(p, q, h + 1/3)        g = hue2rgb(p, q, h)        b = hue2rgb(p, q, h - 1/3)    End If    hsl2rgb = Array(r * 255, g * 255, b * 255)End FunctionFunction hue2rgb(p, q, t)    If (t < 0) Then t = t + 1    If (t > 1) Then t = t - 1    If (t < 1/6) Then      hue2rgb = p + (q - p) * 6 * t    ElseIf (t < 1/2) Then hue2rgb = q    ElseIf (t < 2/3) Then hue2rgb = p + (q - p) * (2/3 - t) * 6    Else hue2rgb = p    End IfEnd FunctionFunction StrOffset(pos, dX, dY)	Dim arrTemp, i	arrTemp= Split(pos, ",")	For i=0 To UBound(arrTemp) Step 2		arrTemp(i) = arrTemp(i) + dX		arrTemp(i+1) = arrTemp(i+1) + dY	Next	StrOffset =  Join(arrTemp, ",")End Function	]%>